#+title: ORG Content
#+author: Victor Dorneanu
#+startup: indent
#+hugo_base_dir: ../
#+hugo_section: posts
#+hugo_auto_set_lastmod: t
#+property: header-args :eval never-export

#+macro: zk [[https://brainfck.org/#$1][$2]]
#+macro: bib [[https://brainfck.org/bib.html#$1][$2]]

* Posts
** DONE Bye bye Scout24! :byebye:
CLOSED: [2021-09-15 Mi 09:58]
:PROPERTIES:
:EXPORT_FILE_NAME: 2021-bye-bye-scout24
:END:

[[file:../static/posts/img/2021/bye-bye-scout24.jpg]]
I guess it's become a tradition to write /[[/tags/byebye][bye bye]]/ posts whenever I switch jobs. So this happens again as I've decided to pursue new opportunities elsewhere. I feel sad but also excited at the same time. Working for 5 years for the same company (I do know that's not thaaaat long) feels like I've spent half of my life there. Since 2016 many colleagues have left the company and new ones joined the Security team which I was part of. During these 5 years the Security team has made a quite succesful transition from a mostly *red team* to a *blue team* one. While at the beginning I was doing *penetration tests* like there was no tomorrow, I now leave my team with internal self-built, self-managed security products (mostly in [[/tags/python][Python]] ,[[/tags/golang][Golang]] ) for the developer teams at Scout24.
*** Things I've learned
And while I had the opportunity to improve my pentest skills (mostly web applications), there are tons of new
things I've learned:
- [[/tags/aws][AWS]]
  + Before joining Scout24 I completely had no cloud experience
  + I'm still not an expert but I can get along. My team got used to this quote:
    /AWS is like a kitchen. You just use whatever you need for your dish./
- {{{zk(Serverless,Serverless)}}}
  + The very first time I worked on a serverless project (codestripper) it felt like magic
  + It was so /magic/ that I've generated my first so called /5k Issue/
  + I've learned that coding for a cloud + serverless environment is so much different than running your code on your laptop/inside docker
- [[/tags/golang][Golang]]
  + I was the first one in the team to setup a quite complex Golang project
    - @Ralph: I know you were actually the first one. But the mini snippets you've used don't really count :D
  + This year I was able to convince the team to start a new project (related to [[https://dependabot.com/][dependabot]]) in Go (instead of [[/tags/python][Python]] )
  + I was amazed and surprised how fast we were able to add more and more features while having a steep learning curve
  + I've held my "*Golang for Hackers*" workshop for the Security team where I've shown how to build small Golang applications for compromised systems (e.g. port scanners, TOR clients, DNS tunneling)
- [[/tags/python][Python]]
  + Although I've been coding in Python since years, contributing to an enterprise software project was a different experience
  + For the first time in my life I was forced to write unit tests (thanks David!) and think about CI/CD
  + Doing complex stuff in Python also showed me it's weaknesses and there are some good reasons why I still prefer static typed languages (like [[/tags/golang][Golang]]) for big projects
*** Thanks to
Without any claim to completeness I've setup a list of people I'd like to express my gratitude and appreciation to. Many of them already left Scout24 but their thoughts (and attitude!) had a huge impact on my personal growth. Here it goes (in somehow chronological order):
- *Ralph*
  + Thanks for being a buddy and for our lovely /office romance/
  + You still owe me a bottle of [[https://en.wikipedia.org/wiki/%C8%9Auic%C4%83][Țuică]]
  + Thanks for sharing your /Netzwerkgehampel/ (German for colloquial "network stuff") with me
- *David V*.
  + Dude, do you remember our pentest sessions?
  + Especially the PHP related ones?
  + I hope you're well (what about your cats?)
- *Fridtjöf*
  + Thanks for on-boarding me
  + Do you remember that 1:1 ssession where I've told you behind you some strange guy is wattering his plants on the balcony completely *naked*? Sorry for this (funny) anecdote but I guess I won't forget that situation for my whole life
- *Markus*
  + Thanks for pushing me beyond my limits, for making me to think big
  + You were like a mentor for me, always calm and always close to the team
  + Also thanks for the BBQ partys and the discussions we had at [[https://reinforce.awsevents.com/][AWS Re:inforce]]
- *Alex*
  + Mon ami, I've really enjoyed our lunch dates and the training sessions we had in the fitness room
  + I wish you all the best on your new carrer path
- *Hussam*
  + I really convinced you to learn [[/tags/golang][Golang]]! I'm so proud of you
  + Also thanks for your AWS knowledge-sharing sessions
  + /The best or nothing/, right?
- *Slava*
  + Man, if you only knew how deep I got into Emacs and ORG mode! It basically changed the way I work and organize my life
  + Thanks for your inspiration
- *Gervais*
  + Mon ami 2, I really enjoyed our political discussions after lunch
  + I still hope you'll do some ice baths some day :)
  + And in case you feel cold, just do some Scala compiling (ya know what I'm talking about)
- *David*
  + Unit tests, unit tests, unit tests!
  + Thanks for doing the frontend related workshops
  + I really enjoyed our infrastructure/design sessions
- *Mostafa*
  + Quote of the year: "People with fast internet can be very sensitive"
  + Thanks for taking care of all the shit nobody wanted to take care of
  + Your appsec related workshops/presentations were awesome!
- *Daniel*
  + Thanks for introducing "organized work/planning" to the team
  + I also thank you for making me a more responsible engineer and adopting "constructive criticism"
- *Felix*
  + Thanks for attending my "Golang for Hackers" session
  + I hope DNS tunneling will have some benefit for you
- *Abed*
  + Was a pleasure to meet you and do some real work with you
  + I'm looking forward to the next rewrite: Golang to Kotlin, back to Python?
  + One more thing: Your mouse is still moving! :)
- *Rakib*
  + Our pairing sessions on some Python code were amazing
  + I wish you all the best with your studies

** DONE Implement an access key rotator :golang:architecture:aws:github:
CLOSED: [2021-04-25]
:PROPERTIES:
:EXPORT_FILE_NAME: 2021-implement-an-access-key-rotator
:END:
*** Introduction
With the recent success of [[https://docs.github.com/en/actions/learn-github-actions][Github actions]] you can automate lots of things whenever something in your repos changes, e.g. automatically generate static HTML content (using [[file:/tags/hugo][hugo]]) and push it to some repository for which GitHub Pages has been configured. Check this [[https://github.com/sdras/awesome-actions][awesome actions]] list for more use cases.

Using [[https://docs.github.com/en/actions/reference/encrypted-secrets][encrypted secrets]] defined either per repository or organization, you can bring your Github workflow to the next level: Authenticate against APIs, login to different services while keeping your secrets/credentials away from your repositories. As a general you should *never* store credentials in your repositories, even
if they're private. Misconfigurations happen all the time and private repos can become public ones without further notice.

In this post I want to show the [[file:/tags/golang][Golang]] way how to update Github *secrets* in some repository. These secrets (more concrete an ~AWS IAM access key ID~ and an ~AWS IAM access secret key~) should be used to interact with [[file:/tags/aws][AWS]]. Rotating these keys regularly is essential and also part of the [[https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html][AWS access keys best practices]].

{{< notice info >}}
Make sure you also check [[https://github.com/dorneanu/access-key-rotator][github.com/dorneanu/access-key-rotator]] for the complete project.
{{< /notice >}}

*** Clean architecture

I'm obsessed with clean code, clean architecture and almost everything that has an easy to understand structure.
First of all I'll start with the ~use cases~ which describe what the application is capabable of doing. In our case we have

- Rotate keys
  - Given a ~key manager~ the existing access keys will be rotated
- Upload secrets
  - using a ~secrets store~ we'll upload the *encrypted* access key to some storage for later usage

The ~KeyManager~ and the ~SecretsStore~ are interfaces to be implemented by different service providers. What the both have in common is the
~AccessKey~ data structure which holds everything we need to know about an access key.
 

#+begin_src plantuml :file ../static/posts/img/2021/key-rotator-interfavces-entities.png :cmdline -charset UTF-8 :exports results
allow_mixing

folder Interfaces {
    interface KeyManager {
        + ListAccessKeys()
        + CreateNewAccessKey()
        + DeleteAccessKey()
    }

    interface SecretsStore {
        + CreateSecret()
        + UpdateSecret()
        + DeleteSecret()
    }
}

folder Entities {
    class AccessKey{
        + ID
        + Secret
    }
}

usecase (Use case: Rotate\nkeys) as UC1
usecase (Use case: Upload\nsecrets) as UC2
KeyManager -up-> AccessKey : use
SecretsStore -up-> AccessKey : use

KeyManager <-- UC1 : use
SecretsStore <-- UC2 : use
#+end_src

#+CAPTION: Interfaces using entities
#+RESULTS:
[[file:../static/posts/img/2021/key-rotator-interfavces-entities.png]]


Now that we have defined the general application design, let's go more into details and see which components have to implement the declared interfaces:

- ~KeyManager~
  - a key manager is something that holds/stores your access keys and provides functionalities (CRUD: create, read, update, delete) in order to manage those
  - examples: AWS IAM, Google Cloud IAM, Azure IAM
- ~SecretsStore~
  - something that stores your access keys in a secure manner
  - examples: GitHub Secrets, Gitlab Secrets, LastPass
- ~ConfigStore~
  - something related to a parameter store
  - examples: AWS SecretsManager, Google Cloud Secret Manager

Each of these components (using 3rd-party libraries etc.) will need to implement the correspondig interface.

#+begin_src plantuml :file ../static/posts/img/2021/key-rotator.png :cmdline -charset UTF-8 :exports results
folder Interfaces {

    interface KeyManager {
        + ListAccessKeys()
        + CreateNewAccessKey()
        + DeleteAccessKey()
    }

    interface SecretsStore {
        + CreateSecret()
        + UpdateSecret()
        + DeleteSecret()
    }
    interface ConfigStore {
	      + GetValue(key string) string
    }
}

folder Entities {
    class AccessKey{
        + ID
        + Secret
    }
}


folder "github.com/aws/aws-sdk-go-v2" {
    interface AWSIAM {
        + ListAccessKeys()
        + CreateNewAccessKey()
        + DeleteAccessKey()
    }
    interface AWSSSM {
        + GetParameter()
    }
}

folder "cloud.google.com/go" {
    interface GCPIAM {
        + ListAccessKeys()
        + CreateNewAccessKey()
        + DeleteAccessKey()
    }
}

folder "github.com/google/go-github" {
    class GithubAPI
}

folder "Own code" {
    class GCPKeyManager{
        - client *gcp.Client
    }
    class AWSKeyManager{
        - client *iam.Client
    }
    class AWSConfigStore {
        - client *ssm.Client
    }
    class GithubSecretsStore
    class GitlabSecretsStore
}



AWSKeyManager --> KeyManager
AWSConfigStore --> ConfigStore
GCPKeyManager --> KeyManager
AWSKeyManager -up-> AWSIAM
AWSConfigStore -up-> AWSSSM
GCPKeyManager -up-> GCPIAM

GithubSecretsStore -up-> GithubAPI :use

GithubSecretsStore --> SecretsStore
GitlabSecretsStore --> SecretsStore

KeyManager -down-> AccessKey : use
SecretsStore -down-> AccessKey : use
#+end_src

#+CAPTION: Components implementing interfaces
#+RESULTS:
[[file:../static/posts/img/2021/key-rotator.png]]

*** AWS Golang SDK v2

I'll be using the latest Golang SDK which is [[https://github.com/aws/aws-sdk-go-v2][v2]]. In order to manage the [[https://aws.github.io/aws-sdk-go-v2/docs/code-examples/iam/][IAM access]] keys we're going to need these endpoints:

- list all available access keys using [[https://aws.github.io/aws-sdk-go-v2/docs/code-examples/iam/listaccesskeys/][ListAccessKeysV2]]
- generate new IAM access key using [[https://aws.github.io/aws-sdk-go-v2/docs/code-examples/iam/createaccesskey/][CreateAccessKeyv2]]
- delete old access keys using [[https://aws.github.io/aws-sdk-go-v2/docs/code-examples/iam/deleteaccesskey/][DeleteAccessKeyv2]]

In order the make the code more *testable* I'll be using an *interface* called ~IAMAPI~ which should contain all methods an IAM API real implementation
should provide. Generating mocks should be then also an easy task as described in [[https://aws.github.io/aws-sdk-go-v2/docs/unit-testing/][Unit Testing with the AWS SDK for Go V2]].

#+begin_src go
type IAMAPI interface {
	ListAccessKeys() ...
	CreateAccessKey() ...
	DeleteAccessKey() ...
}
#+end_src

Additionally I'll use an own ~Configuration~ type meant to hold all information my applications needs. I find [[https://github.com/kelseyhightower/envconfig][github.com/kelseyhightower/envconfig]] to be quite
handy when you have to deal with *environment* variables:

#+begin_src go
// Config holds all relevant information for this application to run
type Config struct {
	IAM_User   string `envconfig:"IAM_USER", required:"true"`
	AWS_REGION string `envconfig:"AWS_REGION" required:"true"`
	...
}
#+end_src

**** List/Fetch all available IAM keys

First of all let's list all available IAM access keys.

#+begin_src go
package main

import (
	"context"
	"fmt"
	"log"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/kelseyhightower/envconfig"
)

// Config holds all relevant information for this application to run
type Config struct {
	IAM_User   string `envconfig:"IAM_USER", required:"true"`
	AWS_REGION string `envconfig:"AWS_REGION" required:"true"`
}

// We'll define an interface fot the IAM API in order to make testing easy
// This interface will be extended as we go through the different steps
type IAMAPI interface {
	ListAccessKeys(ctx context.Context, params *iam.ListAccessKeysInput, optFns ...func(*iam.Options)) (*iam.ListAccessKeysOutput, error)
}

// ListAccessKeys retrieves the IAM access keys for an user
func ListAccessKeys(c context.Context, api IAMAPI, username string) (*iam.ListAccessKeysOutput, error) {
	input := &iam.ListAccessKeysInput{
		MaxItems: aws.Int32(int32(10)),
		UserName: &username,
	}
	return api.ListAccessKeys(c, input)
}

// loadConfig will return an instance of Config
func loadConfig() *Config {
	var c Config
	err := envconfig.Process("", &c)
	if err != nil {
		log.Fatal(err.Error())
	}
	return &c
}

func main() {
	// Get configuration
	c := loadConfig()

	// Initialize AWS
	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		panic("configuration error, " + err.Error())
	}

	// Create new IAM client
	iam_client := iam.NewFromConfig(cfg)
	result, err := ListAccessKeys(context.TODO(), iam_client, c.IAM_User)
	if err != nil {
		fmt.Println("Got an error retrieving user access keys:")
		fmt.Println(err)
		return
	}

	// Print available IAM access keys
	for _, key := range result.AccessKeyMetadata {
		fmt.Println("Status for access key " + *key.AccessKeyId + ": " + string(key.Status))
	}
}
#+end_src

#+begin_example
Status for access key AKIAWSIW5AN47M5YY72J: Active
#+end_example

As you can see there is an IAM access key with the ID ~AKIAWSIW5AN47M5YY72J~ and it's active.

**** Generate new IAM access key
In the next step we'll generate a new pair of access key. Therefore we'll extend the ~IAMAPI~ interface with a 2nd method:

#+begin_src go
type IAMAPI interface {
	ListAccessKeys(ctx context.Context, params *iam.ListAccessKeysInput, optFns ...func(*iam.Options)) (*iam.ListAccessKeysOutput, error)
	CreateAccessKey(ctx context.Context, params *iam.CreateAccessKeyInput, optFns ...func(*iam.Options)) (*iam.CreateAccessKeyOutput, error)
}
#+end_src

Creating a new key pair should also be straght forwards:

#+begin_src go
// CreateAccessKey will create a new IAM access key for a specified user
func CreateAccessKey(c context.Context, api IAMAPI, username string) (*iam.CreateAccessKeyOutput, error) {
	input := &iam.CreateAccessKeyInput{
		UserName: &username,
	}
	return api.CreateAccessKey(c, input)
}
#+end_src

And then in the ~main()~ we add:
#+begin_src go
	// Create new IAM access key
	new_key, err := CreateAccessKey(context.TODO(), iam_client, c.IAM_User)
	if err != nil {
		fmt.Println("Couldn't create new key: " + err.Error())
		return
	}

	// Print new key
	fmt.Println("Created new access key with ID: " + *new_key.AccessKey.AccessKeyId + " and secret key: " + *new_key.AccessKey.SecretAccessKey)
#+end_src

And if we run it, we'll get the new key id and the secret key:

#+begin_example
...
Created new access key with ID: AKIAWSIW5AN46DT2ENLL and secret key: ****************************************
#+end_example

**** Delete old access key

We'll extend the ~IAMAPI~ interface again:
#+begin_src go
type IAMAPI interface {
	ListAccessKeys(ctx context.Context, params *iam.ListAccessKeysInput, optFns ...func(*iam.Options)) (*iam.ListAccessKeysOutput, error)
	CreateAccessKey(ctx context.Context, params *iam.CreateAccessKeyInput, optFns ...func(*iam.Options)) (*iam.CreateAccessKeyOutput, error)
	DeleteAccessKey(ctx context.Context, params *iam.DeleteAccessKeyInput, optFns ...func(*iam.Options)) (*iam.DeleteAccessKeyOutput, error)
}
#+end_src

The ~DeleteAccessKey~ will also need an ~access key ID~ and an ~username~:

#+begin_src go
// DeleteAccessKey disables and removes an IAM access key
func DeleteAccessKey(c context.Context, api IAMAPI, keyID, username string) (*iam.DeleteAccessKeyOutput, error) {
	input := &iam.DeleteAccessKeyInput{
		AccessKeyId: &keyID,
		UserName:    &username,
	}
	return api.DeleteAccessKey(c, input)
}
#+end_src

For this example we'll just delete the previously created IAM access key:

#+begin_src go
	// Delete key
	_, err = DeleteAccessKey(
		context.TODO(),
		iam_client,
		,*new_key.AccessKey.AccessKeyId,
		c.IAM_User,
	)
	if err != nil {
		fmt.Println("Couldn't delete key: " + err.Error())
		return
	}
	fmt.Printf("Deleted key: %s\n", *new_key.AccessKey.AccessKeyId)
#+end_src
*** Github setup
The Github implementation will have to satisfy the ~SecretsStore~ interface:

#+begin_src golang
type SecretsStore interface {
	EncryptKey(context.Context, entity.AccessKey) (*entity.EncryptedKey, error)
	ListSecrets(context.Context) ([]entity.AccessKey, error)
	CreateSecret(context.Context, entity.EncryptedKey) error
	DeleteSecret(context.Context, entity.EncryptedKey) error
}
#+end_src

**** SecretsStore implementation
As we have done with *AWS* we'll try to decouple everything and have less cohesion. This will make every part of our code testable.
The ~GithubSecretsStore~ (implementing ~SecretsStore~) will look like this:

#+begin_src golang
type GithubSecretsStore struct {
	repo_owner    string
	repo_name     string
	secretsClient GithubSecretsService
}
#+end_src

**** Make secrets service abstract
The ~secretsClient~ is a *service* that allows us to create, upload and delete secrets using [[https://docs.github.com/en/rest/reference/actions#secrets][Github's Secrets API]]. The ~GithubSecretsService~
will have following definition (make sure to have a look at the methods provided by the [[https://pkg.go.dev/github.com/google/go-github/v32/github#ActionsService][ActionsService]]):

#+begin_src golang
type GithubSecretsService interface {
	GetRepoPublicKey(ctx context.Context, owner, repo string) (*github.PublicKey, *github.Response, error)
	CreateOrUpdateRepoSecret(ctx context.Context, owner, repo string, eSecret *github.EncryptedSecret) (*github.Response, error)
	ListRepoSecrets(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.Secrets, *github.Response, error)
	DeleteRepoSecret(ctx context.Context, owner, repo, name string) (*github.Response, error)
}
#+end_src

This way we can create a ~GithubSecretsStore~ with a mocked version of ~GithubSecretsService~. But there is still something missing. Of course, the ~Github client~ itself:

#+begin_src golang
type GithubClient struct {
	client *github.Client
}
#+end_src

**** Use a real Github client
And how does this structure fit together with the *service* and the *store*? Following /constructor/ should provide the answer:

#+begin_src golang
func NewGithubClient(accessToken string) GithubSecretsService {
	ctx := context.Background()
	ts := oauth2.StaticTokenSource(
		&oauth2.Token{AccessToken: accessToken},
	)
	tc := oauth2.NewClient(ctx, ts)
	client := github.NewClient(tc)
	return client.Actions
}
#+end_src

Here I initialize a new ~github.Client~ by using an OAUTH2 token. Afterwards I return ~client.Actions~ which btw satisfies the ~GithubSecretsService~ interface. Now let's code a constructor for the ~GithubSecretsStore~:

#+begin_src golang
func NewGithubSecretsStore(secretsService GithubSecretsService, repoOwner, repoName string) *GithubSecretsStore {
	return &GithubSecretsStore{
		secretsClient: secretsService,
		repo_owner:    repoOwner,
		repo_name:     repoName,
	}
}
#+end_src

Here ~NewGithubSecretsStore~ expects a ~GithubSecretsService~ and some other additional information (repository owner/name). As the {{{zk(LSP, Liskow Substitution Principle)}}} says:

#+begin_quote
Express dependencies between packages in terms of interfaces and not concrete types
#+end_quote

in ~NewGithubSecretsStore~ we don't expect an ~ActionsService~ as it is returned by ~github.Client.Actions~. So, in order to glue everything together we'll have to

- first create a concrete implementation of ~GithubSecretsService~
- and then create a new ~GithubSecretsStore~ with that concrete implementation

So in the real code this will look like this:

#+begin_src golang
accessToken, err := configStore.GetValue(context.Background(), "github-token")
if err != nil {
    log.Fatalf("Unable to get value from config store: %s", err)
}
githubSecretsClient := s.NewGithubClient(accessToken)
secretsStore = s.NewGithubSecretsStore(githubSecretsClient, settings.RepoOwner, settings.RepoName)
#+end_src

*** Conclusion
Setting up a project with clean code in mind is not an easy task. You have to abstract things
and always keep in mind:

#+begin_quote
How can you know your code works? That’s easy. Test it. Test it again. Test it up. Test it down. Test it seven ways to Sunday -- {{{bib(The Clean Code - Note 8, Source)}}}
#+end_quote

And how do you make sure your code is /testable/? By using abstractions instead of concrete implementations and making each single part of your code /mockable/ aka testable.

** DONE Note taking in 2021                                                    :golang:tiddly:pkms:
CLOSED: [2021-06-13 Sun 14:56]
:PROPERTIES:
:EXPORT_FILE_NAME: 2021-note-taking-in-2021
:END:

{{< notice info >}}
**[Update 2021-06-22]**

If you're more interested in the Tiddlywiki aspect of this post you can also check this [[https://groups.google.com/g/tiddlywiki/c/vlAZ_K4K63o/m/cPuFWVIKAQAJ][Tiddlywiki Google Groups thread]].
{{< /notice >}}

{{< notice info >}}
**[Update 2021-06-18]**

This post caught some attention on [[https://news.ycombinator.com/item?id=27513008][this Hackernews thread]]. You might want to check the comments. Based on the recommendations in the thread I've put together a list of (digital) solutions (besides the preferred ones)
{{< /notice >}}


Almost 6 years ago I was blogging about [[/2015/09/17/organizing-and-visualizing-knowledge/][organizing and visualizing knowledge]]. At that time I was just playing around with {{{zk(Tiddlywiki, Tiddlywiki)}}} and using it to collect notes during my [[/tags/ccna/][CCNA]] course. I couldn't anticipate to which extent [[https://en.wikipedia.org/wiki/Personal_knowledge_management][personal knowledge management systems]] would become famous and trendy. And people nowadays don't blog anymore: They take care of their [[https://joelhooks.com/digital-garden][digital gardens]]. While most of them seem to be just a collection of random notes, there are actually good ones where you can actually read through the thoughts/notes and learn something new. Here are my favourite ones:

- [[https://notes.andymatuschak.org/About_these_notes][Andy Matuschanks Digital Garden]]
- [[https://braindump.jethro.dev/][Jethro's Braindump]] (build with {{{zk(ORG Mode, ORG Mode))}}} and [[https://ox-hugo.scripter.co/][ox-hugo]])
  + more in his [[https://github.com/jethrokuan/braindump][github repository]]
- [[https://zettelkasten.sorenbjornstad.com/][Personal Zettelkasten of Soeren]]
  + Did I already mention what a {{{zk(Zettelkasten, Zettelkasten)}}} is about?

And what about me? Yes, I still blog but I also have a digital garden available at [[https://brainfck.org][brainfck.org]]. For me blogging and maintaining a public source of inspirations and ideas is not the same. A blog post should be readable and contain full sentences. A collection of ideas/thoughts can be just some bullet points with some random links (for me they're not random, since I actively set those links in order to inter-connect notes). The idea is that I use my ~PKMS~ to lookup things and generate new content (like this post). That's for the introduction. Now let's talk about the importance of having and maintaining a source of notes/thoughts.

*** Motivation
After all: What's all the fuzz about "note taking"? You have them //somewhere//, you use them //somehow//. Well, there it's more than that. In my job as a Security Engineer I need to keep up with new technologies and arising attack vectors. Additionally I tend to {{{zk(Books,read)}}} about non-IT topics I'm currently
interested in. Each time I want to make sure I don't have to re-read/review that source again when I think I might use an interesting idea/concept out of it.
Making future-proof notes (a terminology used in a {{{zk(Zettelkasten, Zettelkasten)}}} system) is essential for me also because I use that content to generate new one.

Not only in a professional context, but also for private purposes it does make sense to //actively// read your books/articles. Try to apply some //analytical reading//, a concept I've read about for the first time in {{{zk(How to read a book, How to read a book (book))}}}. The idea is to interact with the content you're reading about: Ask questions, try to link ideas in your mind, make notes, lookup complex definitions. The worst thing you can do is to just //passively// read something, finish it and then you move on to your next reading. After finishing a book, I always take some time (1-3 hours) to go through my notes, adjust already existing ones or link them to other ones.
*** The perfect setup
I've spent the last years, trying to find not only the perfect note *taking* system but also the most proficient note *storage* system. I don't want to dissapoint you, but there is no perfect solution. You just need one system that fulfills //your needs//, is easy to use and will most probably still work in a couple of years.
Let's have a look at my current setup which has envolved over the last 2-3 years and definitely will change whenever I think I can optimize each step individually.
*** Note taking
For me this is the most important step when dealing with sources of information in general. The process of note taking is supposed to help you to internalize the main concepts and the authors ideas. In this step taking //temporary notes// as described by Söhnke Ahrens in his book "How to take smart notes" (german: {{{zk(Das Zettelkasten-Prinzip, Das Zettelkasten-Prinzip)}}}) will give you a good starting point for storing them in a //permanent// manner. But more on this below.
**** Pen and paper
This is still my favourite way of writing things down and collecting so called //temporary notes// as described by Söhnke Ahrens in his book "How to take smart notes" (german: {{{zk(Das Zettelkasten-Prinzip, Das Zettelkasten-Prinzip)}}}). All you need is just a piece of paper and something to write. You're free to use whatever structure you want as long as it doesn't disturb your reading flow. Add diagrams, bullet points, symbols or everything you think is necessary.

The downside of this analogue method is the fact your notes could get lost at some point. You have no automated backups in-place and if you lose your "paper" notes,
also your work is gone.

***** Some examples

#+CAPTION: Taking notes on A5 paper (notes for the book {{{zk(1984,1984)}}})
[[file:../static/posts/img/2021/note-taking/note-taking-paper.jpg]]

#+CAPTION: The same also for tech books (notes for the book {{{zk(Black Hat Go,Black Hat Go)}}})
[[file:../static/posts/img/2021/note-taking/note-taking-technical.jpg]]

#+CAPTION: Taking notes in a A4 notebook (notes for {{{zk(How not to die, How not to die)}}})
[[file:../static/posts/img/2021/note-taking/note-taking-a4.jpg]]

#+CAPTION: Works with A5 as well (its easier to carry it around, notes for {{{zk(The Big Five for Life,The Big Five for Life)}}})
[[file:../static/posts/img/2021/note-taking/note-taking-a5.jpg]]

#+CAPTION: A5 is also good for keeping track of (non-IT) projects such as camping boxes for the car :)
[[file:../static/posts/img/2021/note-taking/note-taking-project.jpg]]

#+CAPTION: I also use paper to store patterns, notes for drumming (in my example Djembe/Darbuka). I can always carry them around and I have everything at one place.
[[file:../static/posts/img/2021/note-taking/note-taking-djembe.jpg]]

**** Smartphone
Yes, this might surprise you, but I do use my smartphone to take notes, especially when I don't have a "piece of paper" with me. The best thoughts will come to your mind when you don't expect them to do so. And in that case you should be better prepared to write them down.

***** orgzly
At some point I've started using [[http://www.orgzly.com/][orgzly]] which worked fine for {{{zk(ORG Mode, ORG mode)}}} in combination with [[https://syncthing.net/][syncthing]] for the cross-device synchronization. However, once I've came back to {{{zk(Tiddlywiki, Tiddlywiki)}}} I've somehow abandoned orgzly in flavour of [[https://mimind.cryptobees.com/][miMind]].

#+CAPTION: Taking notes with orgzly
{{< youtube GYhIMHjGzjQ >}}

***** miMind pro
This little (mobile) application has great usability and it does help you to quickly add new notes, structured as a mind map. You can then easily export your map as XML which can then be converted to [[/tags/org][ORG]] format.

#+CAPTION: Taking notes with miMind Pro
{{< youtube IR-8q6TQZ7c >}}

In the application itself (as shown in the video) you can export your mind map to a XML file which can be converted to [[/tags/org][ORG]] using this small [[/tags/golang][Golang]] utility:

{{< gist dorneanu 906facb9aa2eb88c51dd348cdeaddf97 "main.go" >}}

Once you have download all files included in the gist you can run it against your miMind XML file. In my case I had this XML:

#+begin_src shell
❯ head Ernährungskompass.xml
<Root>
<Header info="Created with miMind software."></Header>
<Content>
<Node Title="Ernährungskompass">
<Node Title="Kapitel 1">
<Node Title="Der Eiweisseffekt">
<Node Title="Tiere sind auf Proteinsuche bis sie ihren Proteinbedarf gedeckt haben"></Node>
<Node Title="Zu viele Proteine sind auch nicht gut, da sie den Alterungsprozess begünstigen"></Node>
</Node>
<Node Title="Insektenforscher">
#+end_src

#+begin_src shell
$ go run main.go -hl 1 -f Ernährungskompass.xml | head
...
#+end_src

**** Desktop

{{{zk(GTD, GTD)}}} suggests to always {{{zk(GTD/Input, capture)}}} what has our attention. Also minizing the number of possible capture locations makes your life even easier. But I also tend to capture my thoughts where it feels most comfortable. If I'm doing some work at my laptop and suddenly some idea comes to my mind, then I'll capture it on my laptop. In that case I won't grab a piece of paper, put a label on it (to remember what the thought was about) and then put it aside. I'd rather use tools on my desktop system.

During the last months 2 //input capture systems// established and have become part of my note capture routine:
- [[https://orgmode.org/manual/Capture.html][ORG Capture]]
  + Intergrated within Emacs and ORG mode
  + I use it mainly for events, appointments or TODOs
  + I'm not using it anymore for storing thoughts, bookmarks, ideas since I've moved back to Tiddlywiki
- {{{zk(Tiddlywiki, Tiddlywiki)}}}
  + I always have a running (nodeJS) instance in my browser ([[https://brainfck.org][here you can view the exported version]])
  + Whenever I think something should be added to an existing note, I open that tab, search for that specific //tiddler// (a page/note in the Tiddlywiki ecosystem) and make the changes
  + I also used for storing notes to podcasts, articles I listen/read to/about during the day


#+CAPTION: Whenever I work at my laptop and think I need to write sth down, bookmark a site, I use Tiddlywiki's journals to do so (link to that specific journal: {{{zk(2021-12-03,2021-12-03)}}})
[[file:../static/posts/img/2021/note-taking/note-taking-journal.jpg]]

#+CAPTION: Here is a list of some {{{zk(Journal, Journal)}}} entries
[[file:../static/posts/img/2021/note-taking/note-taking-list-of-journals.jpg]]

*** Note storage
Contrary to what [[https://en.wikipedia.org/wiki/Niklas_Luhmann][Niklas Luhmann]] was doing with his "slip box" (german: Zettelkasten) I like to have my notes stored digitally. Not only I can easily make multiple
backups and store them at different locations, but I can also apply batch operations (text modification, add/remove tags etc.) using command line tools like ~sed~, ~awk~ & co. And as with the {{{zk(Unix, Unix)}}} philosophy [[https://en.wikipedia.org/wiki/Everything_is_a_file][everything is a file]] I like to cluster notes (on the same topic) in one single file. This solution is completely software agnostic and files can be modified accordingly to be imported into different note-taking systems.

**** Requirements
I wrote this post in order to give you some ideas what worked best for /me/ but it's up to you to define which requirements you need for a simple, working solution. For me these
requirements were /essential/:
- *digital solution*
  + like I've mentioned before I do think digital solutions are the better long-term storage systems
  + you can easily backup them
  + you can share between multiple devices
  + you can have version control in-place
- *edit from (almost) everywhere*
  + well in theory you should be able to view, modify your notes regardless of the device:
    - desktop system
    - smartphone
    - terminal
    - web client
  + I also like to add/modify notes on the fly
- *good looking UI*
  + Being a "terminal guy" for many, many years now I didn't thought I would put this as a requirement
  + However, once you can actually "visualize" your content or more important see the connections between your notes, you'll definitely start to appreciate *UI*
  + Adding new content or modifying existing one shouldn't be a rocket science
- *export content*
  + solution has to be /software agnostic/
  + Imagine in 20 years you'll have to import your notes into some fancy, AI-driven, blockchain-based note system :)
  + You should be able to do this without massive data manipulation
  + You should be able to export *all* content to a common format (who knows if JSON will still be around in 20 years)
    - no proprietary format!
  + If you use tags and extra fields for your content, then it should be easy to use them in the new system
  + You should export all content to a readable form and share it online (like a /digital garden/)

**** Other digital solutions
- [[https://agenda.com/][Agenda]]
  + date focused note taking
- [[https://bear.app/][Bear]]
  + only for Apple devices
- [[https://www.craft.do/][Craft]]
  + only for Apple devices
- [[https://www.zengobi.com/curio/][Curio]]
- [[https://evernote.com/][Evernote]]
- [[https://github.com/foambubble/foam][foam]]
  + personal knowledge management and sharing system for VSCode
- [[https://keep.google.com/][Google Keep]]
  + I also use it for cooking recipies
  + has tags
  + I can easily search in the mobile application
  + Inserting new notes is very easy
- [[https://www.instanote.io/][instanote]]
  + for Apple devices only
- [[https://joplinapp.org/][Joplin]]
  + cross-platform
  + has encryption
  + [[https://mrkaran.dev/posts/how-i-take-notes/][How I take notes]]
- [[https://logseq.com/][logseq]]
  + supports Markdown and ORG-mode files
  + very similar to Roam
  + still in beta though
- [[https://apps.nextcloud.com/apps/notes][Nextcloud/Notes]]
  + chronically underrated
  + has sync already built-in
- [[https://notable.app/][Noteable.app]]
  + available for different platforms
  + notes are written in Markdown
  + [[https://github.com/alok/notational-fzf-vim][notational-fzf]]
    - works fine with Noteable
    - Notational velocity for VIM
- [[https://noteplan.co/][NotePlan]]
- [[https://obsidian.md/][Obsidian]]
  + uses Markdown
  + maintaines an index for linking things
- [[https://www.microsoft.com/en-us/microsoft-365/onenote/digital-note-taking-app][OneNote]]
- [[https://orgmode.org/][ORG Mode]]
  + requires Emacs
  + [[https://organice.200ok.ch/][organice]]
    - implementation of ORG mode without Emacs
    - built for mobile and desktop browsers
  + [[https://www.mtsolitary.com/20210309194647-my-org-mode-setup/][My ORG Mode setup]]
- [[https://roamresearch.com/][Roam Research]]
  + also check [[https://joekroese.github.io/tiddlyroam/][TiddlyRoam]]
  + [[https://giffmex.org/stroll/stroll.html][Stroll]] is also amazing
  + if you want an awesome interface have a look at [[https://kebifurai.github.io/TiddlyResearch/][TiddlyResearch]]
- [[https://www.sparkleshare.org/][SparkleShare]]
  - for sharing documents/folders
- [[https://supernotes.app/][supernotes]]
  + has an API
  + uses notecards (similar to tiddlers) for storing content
- [[https://zettelkasten.de/the-archive/][The-Archive]]
  + built with Zettelkasten philosophy in mind
  + also check the [[https://zettelkasten.de/posts/overview/][Zettelkasten introduction]] which is really great
- [[https://github.com/vimwiki/vimwiki][vimwiki]]
  + personal wiki for VIM users
- [[https://zim-wiki.org/][Zim Wiki]]
  + missing mobile support

*** Final thoughts
I really recommend taking this whole topic more seriously since it will pay off on many layers. Not only you'll be able to deep-dive into multiple topics at once, but you'll have a solid
collection of notes/thoughts for later. Having a solid note eco-system will definitely increase your productivity and overall focus since we already spend to much time /googling/ stuff.
*Use your brain for what it was built for*: Thinking, cognitive processes and creativity. Definitely not for storing information.

** DONE Using org-mode and Tiddlywiki                                          :org:tiddly:
CLOSED: [2021-06-29 Tue 11:43]
:PROPERTIES:
:EXPORT_FILE_NAME: 2021-using-org-mode-and-tiddlywiki
:END:

For many years I've been using this amazing {{{zk($:/plugins/inmysocks/Bookmarks, Bookmarks)}}} plugin which helped to store and manage my {{{zk(Bibliography, bookmark collections)}}}.

*** Add new tiddler to Tiddlywiki
Let's have a look at the most simplest example:

#+begin_src verb :wrap src ob-verb-response :exports both
put http://127.0.0.1:8181/recipes/default/tiddlers/NewTiddler
Content-Type: application/json
Accept: application/json
X-Requested-With: TiddlyWiki
Content-Type: application/json; charset=utf-8

{
    "title": "NewTiddler",
    "tags": "Tiddlywiki"
}

#+end_src

#+RESULTS:
#+begin_src ob-verb-response
HTTP/1.1 204 OK
Etag: "default/NewTiddler/1:"
Content-Type: text/plain
Date: Tue, 29 Jun 2021 09:43:39 GMT
Connection: keep-alive
Keep-Alive: timeout=5
#+end_src

*** Add new bookmark to Tiddlywiki
For adding a new bookmark to {{{zk(Tiddlywiki, Tiddlywiki)}}} you can use ~org-babel~ inside your ORG file to create and fire up requests. Let's have a look at an example:

#+begin_src verb :wrap src ob-verb-response :exports both
put http://127.0.0.1:8181/recipes/default/tiddlers/{{(read-string "URL-Title: ")}}
Content-Type: application/json
Accept: application/json
X-Requested-With: TiddlyWiki
Content-Type: application/json; charset=utf-8

{
    "title": "{{(verb-var title)}}",
    "name": "{{(verb-var title)}}",
    "tags": "Bookmark {{(read-string "Tags: ")}}",
    "note": "{{(read-string "Note: ")}}",
    "url": "{{(read-string "URL: ")}}"
}

#+end_src

#+RESULTS:
#+begin_src ob-verb-response
HTTP/1.1 204 OK
Etag: "default/bla/5:"
Content-Type: text/plain
Date: Tue, 29 Jun 2021 09:34:19 GMT
Connection: keep-alive
Keep-Alive: timeout=5
#+end_src

If you put your cursor just before the ~#+begin_src~ statement and type ~C-c C-c~ that will trigger different events:
- the ~read-string~ will first read input and use it for the placeholder
- the ~verb-var~ statement will ask for some input and save it to variable ~title~
- so in our case you'll be asked for:
  + the URL title
  + the tiddler's title
  + tags (also notice that we per default add ~Bookmark~ as a tag)
  + a note/comment regarding the comment
  + and finally for the bookmark URL
** DONE Inbox Zero using Getpocket                                             :pocket:asciinema:emacs:productivity:
CLOSED: [2021-09-01]
:PROPERTIES:
:EXPORT_FILE_NAME: 2021-inbox-zero-using-getpocket
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :asciinema true
:END:

After finishing my last post on [[/2021/08/15/howto-convert-pocket-reader-links-to-epub-and-upload-to-dropbox/][how to convert getpocket links to epub]] I was thinking a lot about my current workflow, how
I manage to capture everything that
 might be interesting for me and save it for later use. Saving web articles for later reading is not a big deal but dealing with the amount of saved articles requires some management skills. In this post I'll share some best practices on how to organize and categorize your (web) articles in a {{{zk(GTD,GTD)}}} manner: {{{zk(GTD/Input,Capture what has your attention)}}}, {{{zk(GTD/Buckets,organize your content in buckets)}}} and {{{zk(GTD Managing attention,keep an eye on your focus)}}}.

*** Requirements
When I had to decide for a "read it later"/"save for later" service some years ago, I've instantly registered an account with [[https://getpocket.com][getpocket.com]] and I still don't regret my decision. But what should a read it later app be capable of? Here is my incomplete list:
- let's you *save articles* with *one click*
  + ideally there are solutions for different devices (desktop, mobile, e-readers etc.)
  + you can easily save/*share* the content/articles
    - "share to" on mobile phones
    - browser extensions
    - e-mail service that automatically adds your article to the read it later list when you send an e-mail to that specific address
- let's you *organize* your articles
  + you can *tag* items
  + you can *search* for items
    - either by specific tag or
    - by keyword
  + you can *archive* items
  + you can create lists/*collections* of items

Now, for my not so unspecific requirements ~getpocket~ has done a very great job and I still feel bad for no purchasing premium.

*** What is Inbox Zero?

#+begin_quote
"Unproductive preoccupation with all the things we have to do is the single largest consumer of time and energy" - Kerry Glees
#+end_quote

{{{zk(GTD,GTD)}}} proposes to capture everything that has our attention. You can either capture stuff on paper or digitally. And most important of all:
Collection tools should be part of your life style in order to *get everything out of your head*. And for better management you should also minimize the
number of capture locations (at work, at home, on your smartphone, at your desktop, while sitting down, while driving home etc.). {{{zk(GTD Managing attention,Managing attention)}}} will eventually not only get things off your mind but also enable you to collect *things* and access them later.

#+begin_quote
Your brain is for having ideas, not storing them – David Allen
#+end_quote

Now that you know what GTD is about (I really recommend reading the book since you won't find any explanations around the GTD process on the web. I was using GTD methodologies for years but without knowing how to apply them properly and for which areas to use) what is *inbox zero* about? [[https://en.wikipedia.org/wiki/Merlin_Mann][Merlin Mann]] popularized the concept of "inbox zero" which somehow become associated with GTD. Even though [[https://www.wired.co.uk/article/inbox-zero-mentality][Mann stated]] he doesn't keep his inbox empty and everything I *guess* I know about it might be wrong,
let's (re-)define it for our own purposes.

So Inbox Zero is the attempt to keep your inbox empty, or close to empty, at all times. And if you realize everything in your life is an inbox, then you'll see the true benefit of keeping your inbox(es) empty. It not only helps you to make space for new input/ideas, but also use your brain for
what it was built for: Cognitive processes and not for information storage.

While you could apply this methodology to almost everything in life, let's have a look how it could be used for cleaning up your ~getpocket~ inbox for better URL management
and how to get most out of your readings.

*** Why Getpocket
Before we get into details, why did I chose ~getpocket~ at all?

- works on nearly every device
  + mobile clients (smartphones, tablets)
  + desktop clients (browser, native applications)
  + but also on E-readers (like my PocketBook Inkpad 3)
- has great UI
- I love their "readable" content view
  + Now that Mozilla acquired them, most likely they use [[https://github.com/mozilla/readability][readability]]
  + in my [[/2021/08/15/howto-convert-pocket-reader-links-to-epub-and-upload-to-dropbox/][last post]] I was also playing with [[https://github.com/eafer/rdrview][rdrview]] which allows you to have that reader view as a CLI tool
- you can access your articles using the API
  + I'm still missing some features, though
    + e.g. you cannot extract your highlights

**** Alternatives
Here's a list of alternatives in case you don't want to use getpocket:
- [[https://www.instapaper.com/][Instapaper]]
  + never tried
- [[https://raindrop.io/][raindrop.io]]
  + implements pretty much the same feature set as Getpocket does
- [[https://github.com/wallabag/wallabag][wallabag]]
  + this is self-hosted
  + along with [[http://koreader.rocks/][koreader]] you can also use wallabag on your E-Reader device

Apart from these service, there are tons of "bookmark managers" which they all have their pros and
cons. Feel free to give them a try and chose the one matching your needs best.
*** Buckets
Usually when you send an URL to getpocket it will land in your default list (which is [[https://getpocket.com/my-list][my-list]]). Additionally you might have different other lists (such as [[https://getpocket.com/my-list/favorites][favorites]] or [[https://getpocket.com/my-list/archive][archive]]) available. But again: Those are only the default ones and just categorize your content depending on the content type ([[https://getpocket.com/my-list/videos][videos]], [[https://getpocket.com/my-list/articles][articles]] etc.
). What we want to have is a personalized categorization depending on your needs. Also dealing with a huge list like [[https://getpocket.com/my-list][my-list]] can be also very time consuming. You need
to chunk the list in small portions in order to actually *consume* it.

I like the idea of buckets where you can put *things in*. In a perfect world you'd want to have all your buckets
*empty* but I know that is hard to achieve.

#+begin_src plantuml :file ../static/posts/img/2021/input-zero/buckets-all.png :cmdline -charset UTF-8 :exports results
scale 600 width

state getpocket {
    state "/my-list" as Input
    Input : URL #1
    Input : URL #2

    state "/my-list/archive" as Archive
    Archive : URL #1
    Archive : URL #2

    state "/my-list/favorites" as Favs
    Favs : URL #1
    Favs : URL #2

    state "/my-list/articles" as Articles
    Articles : URL #1
    Articles : URL #2
}
#+end_src

#+CAPTION: Different buckets/lists used at getpocket
#+RESULTS:
[[file:../static/posts/img/2021/input-zero/buckets-all.png]]


**** Reading state tags
I use the initial list (my-list) as the first input gate from where I decide what to actually *do* with the content: Read it, share it, print it, delete it etc.

#+begin_src plantuml :file ../static/posts/img/2021/input-zero/tags.png :cmdline -charset UTF-8 :exports results
scale 600 width

state getpocket {
    state "/my-list" as Input
    Input : URL #1
    Input : URL #2

    state "/my-list/tags/next" as Next
    Next : URL #1
    Next : URL #2

    state "/my-list/tags/2read" as 2read
    2read : URL #1
    2read : URL #2

    state "/my-list/tags/2watch" as 2watch
    2watch : URL #1
    2watch : URL #2

    Input -right-> Next: Tag with next
    Input -up-> 2read: Tag with 2read
    Input -down-> 2watch: Tag with 2watch
}
#+end_src

#+CAPTION: I use tags to manage my reading workflow
#+RESULTS:
[[file:../static/posts/img/2021/input-zero/tags.png]]

**** Topics tags

Additionally I of course tag URLs based on topics (like programming language, politics, business etc.) among with
the tags describing each URLs reading state.

#+begin_src plantuml :file ../static/posts/img/2021/input-zero/tags-with-topics.png :cmdline -charset UTF-8 :exports results
scale 600 width

state getpocket {
    state "/my-list/tags/2read" as 2read
    2read : URL #1 \t\t tags: 2read, golang, aws, cdk
    2read : URL #2 \t\t tags: 2read, python, blockchain

    state "/my-list/tags/2watch" as 2watch
    2watch : URL #3 \t\t tags: 2watch, politics
    2watch : URL #4 \t\t tags: 2watch, funny
}
#+end_src

#+CAPTION: Some URLs tagged with reading state tags and topics tags
#+RESULTS:
[[file:../static/posts/img/2021/input-zero/tags-with-topics.png]]

In the above figure I have 4 URLs which are tagged multiple times. When tagging stuff I differentiate between
- reading state tags
- topics tags

In my example I have 2 URLs which I'd like to read (~2read~) and 2 which I'd like to watch (~2watch~). Additionally
I also use *topics tags* in order to categorize my content also by content:
- URL #2 is about {{{zk(Python,Python)}}} and {{{zk(Blockchain,Blockchain)}}}
- URL #3 is about politics

*** Use tags wisely
Whether tagging is good or not has been a controverse topic around {{{zk(Zettelkasten,Zettelkasten)}}} which doesn't recommend tagging (at least in an information system). Here you can read more:
- [[https://notes.andymatuschak.org/z6ztEgzqZichYTJgabhYQLn4UY4FbC1JMH394][Indexed references vs. tags]]
- [[https://fortelabs.co/blog/tagging-is-broken/][Tagging is broken (fortelabs.co)]]
- [[https://forum.zettelkasten.de/discussion/915/tags-vs-zettel-links][Tags vs Zettels]]
- [[https://zettelkasten.de/posts/object-tags-vs-topic-tags/][The Difference Between Good and Bad Tags]]
- [[https://forum.obsidian.md/t/tags-vs-page-link/193/21][Tags vs. page/link (obsidian.md)]]

However, I merely use the tags to define a state which helps my overall reading workflow. Initially I've read about this
idea in [[https://daryl.wakatara.com/the-information-overload-gtd-flow/][Daryl's awesome article on his own GTD workflow]]. It helped me a lot to

Here are these together with some explanations.

**** 2read
- this is pretty much self-explanatory: mark items/articles I want to *read*
- this might no seem obvious (why tagging articles as to-read when using a save-for-later-read service?) but I sometimes getpocket for temporary storage
  + I temporarly add articles/links to it
  + This way the global *input* bucket will eventually get cloaked
**** 2watch
- used to mark items/links that contain some videos
- Whenever I have time to watch some videos I use this list to check what I've marked for watching
- I mostly used this for Youtube videos
  + But also for articles that contain videos (self-hosted)
**** 2listen
- this is mostly about podcasts
  + I tag the whole podcast or specific episodes
**** 2share
- The content I'm reading/watching is sometimes worth to be *shared*
  + I either share it with friends/colleagues/family
  + Add the link to some (bookmark) list (like [[/bookmarks/][these ones]])
  + Or I put into my {{{zk(Tiddlywiki,Tiddlywiki)}}} instance as a bookmark
**** 2print
- I don't own a printer at home so whenever I'm at the copy shop I'd like to have a list of documents/articles to be printed
- I also put Google Docs links into Getpocket and tag them by ~2print~
**** 2go
- I sometimes search for local coffee shops or interesting places I'd like to go to
- this tag helps mark those places so I can find them again

*** My setup
In this last section I'll share some details regarding my workflow, which (getpocket) clients I use and how I manage to stay focussed while going through my articles.
**** Browser add-on
Getpocket has for almost every browser [[https://help.getpocket.com/category/846-category][add-ons]] you can easily use to add content on-the-fly. Try to remember the keyboard shortcuts (I use [[https://github.com/brookhong/Surfingkeys][Surfingkeys]] but that's a different story) for frictionless interaction. In Chrome for example you can use ~CMD+Shift+P~ (OS X) or ~Ctrl+Shift+P~ (Windows/Linux) to add current site to getpocket.

I rarely use this functionality since I try to avoid the browser as much as I can. Not because I'm a freak but
because of distractions every page has to offer. When I want to read sth (and I know there is readmode for Chrome)
I don't want to get distrupted by ads. Whenever I can, I try to read on my E-Reader after having converted the articles to epub and uploaded them to Dropbox.
**** (Doom) Emacs
{{< notice info >}}
**Dotfiles**

You can also check my [[https://github.com/dorneanu/dotfiles/tree/master/emacs/doom/.doom.d][dotfiles]] if you want to get straight to the point.
{{< /notice >}}

During the last 2 years I've become a huge {{{zk(Emacs,Emacs)}}} fan and currently I'm also learning some {{{zk(Lisp,Lisp)}}} to even add more customizations.

When it comes to getpocket there is [[https://github.com/alphapapa/pocket-reader.el][pocket-reader.el]] which is *the* getpocket client for Emacs.

#+CAPTION: Small demo using Emacs, elfeed and pocket-reader
{{< asciinema key="inbox-zero-getpocket" poster="npt:2:34" rows="25" font-size="10px" cols="800" preload="1" >}}

**** Workflow
Depending on the content (if it's a Youtube link, an article, a podcast episode) I'll add accordingly ~2read~, ~2listen~ etc. Sometimes I only want to add that link to a collection of links/bookmarks, so it will only get ~2share~. In ~pocket-reader~ I'll then search for items tagged by ~2share~, copy the links and *archive* (I'll get to this one immediately) them.

After having tagged the items by ~2read~, ~2watch~, ~2listen~, etc. I then decide which items should get my attention
first. How do I do this? Given GTD's statement that {{{zk(GTD Managing attention,open loops will attract attention)}}} I try to give my brain some "break" from the long ~2read~ list. Instead I only tag a few by ~next~
which I'll actually read and focus on. After I have finished reading *all* of them, I remove the tags ~2read~ and ~next~, *archive* the items and add *new* ones (by adding ~next~ to some items in the ~2read~ bucket). Sounds complicated? Let me try to explain using a sequence diagram.

#+begin_src plantuml :file ../static/posts/img/2021/input-zero/workflow-2share.png :cmdline -charset UTF-8 :exports results

MyList->2share : tagged by 2share

== Share item to family, friends, colleagues ==
2share->Archive : archive item
note right
    Optionally:
    Also remove 2share tag before archiving
end note
#+end_src

#+CAPTION: My 2share workflow
#+RESULTS:
[[file:../static/posts/img/2021/input-zero/workflow-2share.png]]

The ~2share~ workflow consists of several steps:
- add item to initial list (my-list)
  + may I already tag the item by ~2share~
- then I share that item with family, friends etc.
  + or add it to some collection (e.g. bookmarks)
- I remove tag ~2share~
- I archive the item

#+begin_src plantuml :file ../static/posts/img/2021/input-zero/workflow-2read.png :cmdline -charset UTF-8 :exports results

MyList->2read : tagged by 2read
MyList->next  : tagged by next

== Fetch next list (containing articles to be read) ==
== Read article (on Desktop, E-reader etc.) ==
next->Archive : item archived
note right: Tags 2read, next are removed

#+end_src

#+CAPTION: My 2read workflow
#+RESULTS:
[[file:../static/posts/img/2021/input-zero/workflow-2read.png]]

The steps here are quite similar:
- I add the article to the initial list
  + I might have already tagged the item by ~2read~
- I'll fetch the ~next~ list, convert it to epub and sent it to Dropbox
  + or eventually I read the item straight away on my phone/desktop
- I might also tag that specific item by ~2share~
  + in case I want to share it
- I remove tags ~2read~ and ~next~
- I archive the item

*** Conclusion
When used wisely ~getpocket~ can be an awesome tool (same applies for any other bookmarking/read-later service). Not only you'll save more time by having the right workflow (and discipline!) for your content management, but
you'll also get to read lot more. I'd like to know more about your workflows, how you deal with content to-be-read and what kind of tools/services you use.

** DONE HowTo: Convert pocket reader links to Epub and upload to Dropbox       :org:pocket:asciinema:howto:emacs:productivity:
CLOSED: [2021-08-15]
:PROPERTIES:
:EXPORT_FILE_NAME: 2021-howto-convert-pocket-reader-links-to-epub-and-upload-to-dropbox
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :asciinema true
:END:

*** Read, organize, archive
I heavily use [[https://getpocket.com][getpocket]] to collect articles and save them for later reading. While on my mobile devices I use the official
app, on my desktop systems (mostly tmux +{{{zk(Emacs, Emacs)}}}) I use [[https://github.com/alphapapa/pocket-reader.el][pocket-reader.el]] quite heavily to collect/organize/archive my list of
articles. After my transition from [[https://www.spacemacs.org/][Spacemacs]] to [[https://github.com/hlissner/doom-emacs][Doom Emacs]] I still love [[https://github.com/emacs-evil/evil][evil]] mode and like to do most of the stuff in ~normal~
mode. That's why I've added some [[https://github.com/dorneanu/dotfiles/blob/master/emacs/doom/.doom.d/%2Bbindings.el#L25][keybindings to pocket-reader]]:

#+begin_src elisp
(map! :map pocket-reader-mode-map
      :after pocket-reader
      :nm "d" #'pocket-reader-delete
      :nm "a" #'pocket-reader-toggle-archived
      :nm "TAB" #'pocket-reader-open-url
      :nm "tr" #'pocket-reader-remove-tags
      :nm "ta" #'pocket-reader-add-tags
      :nm "gr" #'pocket-reader-refresh
      :nm "p" #'pocket-reader-search
      :nm "y" #'pocket-reader-copy-url
      :nm "Y" #'dorneanu/pocket-reader-copy-to-scratch)
#+end_src

This way I can add/remove tags, archive articles, open links without leaving normal mode in ~evil~.

*** Read later on E-Reader
Since I tend to read on my [[https://pocketbook.de/de_de/inkpad-3-dark-brown][e-reader]] most of the time, I also wanted to have an almost automated way of saving articles to *Epub*
and send these to my device. Fortunately PocketBook devices can sync with Dropbox which made my life quite easy in the past. I just had to copy e-books, PDFs, Epubs to a specific folder in Dropbox and these will eventually sync with my device once WiFi
is activated. That's first step of automation.

As for the Epub conversion I've used [[https://pandoc.org/][pandoc]] in the past which still does its job great. Initially I've used [[https://github.com/Y2Z/monolith][monolith]] to save complete web pages as HTML but I've realized the HTML also contained useless ads, images, text. That's why I've searched for
ways how to make the content more *readable* and discovered [[https://github.com/eafer/rdrview][rdrview]]. It's written in C and applies [[https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages][Firefox's reader view]] to web pages. Here are some examples:

#+CAPTION: Get meta information
#+begin_src shell :exports both :results raw code
$ rdrview -M http://blog.dornea.nu/2021/06/13/note-taking-in-2021/
Title: Note taking in 2021 - blog.dornea.nu
Excerpt: [Update 2021-06-22] If you’re more interested in the Tiddlywiki aspect of this post you can also check this Tiddlywiki Google Groups thread. [Update 2021-06-18] This post caught some attention on this Hackernews thread. You might want to check the comments. Based on the recommendations in the thread I’ve put together a list of (digital) solutions (besides the preferred ones) Almost 6 years ago I was blogging about organizing and visualizing knowledge.
Readerable: Yes
#+end_src

And now I'm using some ~xpath~ to extract the title:

#+begin_src shell :exports both :results raw code
$ rdrview -T title,body -H http://blog.dornea.nu/2021/06/13/note-taking-in-2021/ | xmllint --html --xpath "//div/h1/text()" -
Note taking in 2021 - blog.dornea.nu
#+end_src

Below I've glued everything together in order to:
- convert an URL to epub
- extract the title and use it as the filename for the Epub
- do the converion using [[https://pandoc.org/][pandoc]]
- use [[https://rclone.org/][rclone]] to copy the file to Dropbox

#+begin_src shell :exports code
#!/bin/bash

RDRVIEW_OUTPUT=~/work/dropbox/rdrview
DROPBOX_DIR="dropbox:Apps/Dropbox PocketBook/articles/2021/"

add_link_to_dropbox() {
    # Create tmp file
    TEMP_FILE=$(mktemp)

    # Make link readable
    rdrview -T title,body -H $1 > $TEMP_FILE

    # Extract title
    TITLE=$(xmllint --html --xpath "//div/h1/text()" 2>/dev/null ${TEMP_FILE})
    echo "[-] Converting $TITLE"

    # Convert to PDF
    OUTPUT_FILE="${RDRVIEW_OUTPUT}/${TITLE// /_}".epub
    pandoc --pdf-engine=xelatex --metadata title="${TITLE}" -f html -t epub -o ${OUTPUT_FILE} ${TEMP_FILE}

    # Copy to dropbox
    rclone copy ${OUTPUT_FILE} "${DROPBOX_DIR}"

    # Log
    echo "[-] Successfully added ${OUTPUT_FILE} to dropbox."

    # Clean up
    rm $TEMP_FILE
    rm $OUTPUT_FILE
}

add_link_to_dropbox $1
#+end_src

Let's give it a try using https://pandoc.org/ as an URL:

#+begin_src :exports both :results raw code
$ ~/work/dropbox/add_links_to_dropbox https://pandoc.org/
[-] Converting Pandoc - About pandoc
[-] Successfully added /home/victor/work/dropbox/rdrview/Pandoc_-_About_pandoc.epub to dropbox.
#+end_src

*** Emacs for Everything
Now I'd like to be able to call that script from Emacs without copy/paste URLs and hand them over to my script.
The most difficult part here was to come up with some valid Elisp code. What I wanted was:
- in ~pocket-reader~ copy entry's URL to ~scratch~ buffer
- once I have collected the list of URLs for which I want the Epub conversion
  + take the list and use it as input for my script
  + use ~xargs~ since my script takes only one argument

And this is what I've got (my first elisp [[https://github.com/dorneanu/dotfiles/blob/master/emacs/doom/.doom.d/%2Bfunctions.el#L159][function]] ever):

#+begin_src elisp
;; Copy current url to scratch buffer
(defun dorneanu/pocket-reader-copy-to-scratch ()
  "Copy URL of current item to kill-ring/clipboard."
  (interactive)
  (when-let ((id (tabulated-list-get-id))
             (item (ht-get pocket-reader-items id))
             (url (pocket-reader--get-url item)))
    (with-current-buffer "*scratch*"
      (insert url)
      (newline))
     (message "Added: %s to scratch buffer" url)))
#+end_src

This will ~insert~ the URL into the ~scratch~ buffer and add a new line. Once you have your URLs in the buffer you can
use ~shell-command-on-region~ with ~xargs -n1 <script>~ as shown in the asciinema below.

*** Demo
{{< asciinema key="first" rows="40" font-size="10px" cols="800" preload="1" >}}
* Bookmarks :bookmark:
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :noauthor true :nocomment true :nodate true :nopaging true :noread true
:EXPORT_HUGO_SECTION: bookmarks
:EXPORT_HUGO_WEIGHT: auto
:END:
** Golang                                                                       :golang:
:PROPERTIES:
:EXPORT_FILE_NAME: golang
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

*** Microservices

- [[https://blog.gopheracademy.com/advent-2019/building-a-microservices-network][Building a global services network using Go, QUIC and Micro]]
- [[https://sudonull.com/post/8187-Microservices-on-Go-with-the-Go-kit-Introduction][Microservices on Go with the Go Kit]]
- [[https://ewanvalentine.io/how-im-writing-serverless-services-in-golang-these-days/][How I'm writing Serverless services in Golang]]
  #+begin_quote
  Service discovery allows you to register the location of services, with a user
  friendly name, so that you can find other services by name. AWS provides a
  Serverless offering for this, called [[https://aws.amazon.com/cloud-map/][Cloudmap]]
  #+end_quote
  [[https://github.com/peak-ai/ais-service-discovery-go][cloud application library]]

  #+begin_quote
  The most important lesson I hope you take away from this, however, is protecting your business logic from the sea of AWS services and technologies. Treat Lambda as an unimportant detail, treat DynamoDB as an unimportant detail
  #+end_quote
- [[https://blog.gopheracademy.com/advent-2019/building-a-microservices-network/][Building a global services network using Go, QUIC and Micro]]
- [[https://ieftimov.com/post/make-resilient-golang-net-http-servers-using-timeouts-deadlines-context-cancellation/][Make resilient Go net/http servers using timeouts, deadlines and context cancellation]]
  Initialize ~net/http~ server with timeouts:

  #+begin_src
    srv := &http.Server{
        ReadTimeout:       1 * time.Second,
        WriteTimeout:      1 * time.Second,
        IdleTimeout:       30 * time.Second,
        ReadHeaderTimeout: 2 * time.Second,
        TLSConfig:         tlsConfig,
        Handler:           srvMux,
    }
  #+end_src

  - the ~net/http~ packages provide a ~TimeoutHandler~
  - it returns a handler that runs a handler within the given time limit
  - use ~Context~ to be aware of request
- [[https://dev.to/ilyakaznacheev/a-clean-way-to-pass-configs-in-a-go-application-1g64][A clean way to pass configs in a Go application]]

*** AppSec

- [[https://www.sohamkamani.com/blog/golang/2019-01-01-jwt-authentication/][Implementing JWT based authentication in Golang]]

**** Beyondcorp

- [[https://github.com/ory][ory.sh]]
  #+begin_quote
  ORY is the open source and cloud native identity infrastructure. ORY is written
  in Go and open standards and consensus are the foundation. It is language and
  platform independent, extremely lightweight, starts up in seconds and doesn’t
  interfere with your code

  Inspired by Google's BeyondCorp
  #+end_quote

***** TODO [[https://www.ory.sh/docs/next/ecosystem/projects][ory ecosystem]]   :read:
*** AWS

- [[https://github.com/awslabs/aws-apigateway-lambda-authorizer-blueprints/blob/master/blueprints/go/main.go][API Gateway Authorizer Blueprint in Golang]]
- [[https://cloudnative.ly/lambdas-with-golang-a-technical-guide-6f381284897b][API Gateway Custom Authorizer]]
- [[https://dev.to/wingkwong/a-simple-amazon-api-gateway-lambda-authoriser-in-go-4cgd][A simple AWS API Gateway Authoriser in Go]]
- [[https://github.com/guregu/dynamo][expressive DynamoDB library for Go]]
**** CDK
- [[https://aws.amazon.com/blogs/developer/getting-started-with-the-aws-cloud-development-kit-and-go/][Getting started with CDK and Golang]]
- [[https://blog.john-pfeiffer.com/using-aws-cdk-to-configure-deploy-a-golang-lambda-with-apigateway/][Using AWS CDK to configure deploy a Golang Lambda with API Gateway]]

*** Books

- [[https://github.com/dariubs/GoBooks][List of interesting Golang Books]]

*** Configuration
**** Spacemacs

Pre-requisites to use the [[https://develop.spacemacs.org/layers/+lang/go/README.html][go-layer]] inside ~spacemacs~:
#+begin_src
GO111MODULE=on go get -v golang.org/x/tools/gopls@latest
GO111MODULE=on CGO_ENABLED=0 go get -v -trimpath -ldflags '-s -w' github.com/golangci/golangci-lint/cmd/golangci-lint
go get -u -v golang.org/x/tools/cmd/godoc
go get -u -v golang.org/x/tools/cmd/goimports
go get -u -v golang.org/x/tools/cmd/gorename
go get -u -v golang.org/x/tools/cmd/guru
go get -u -v github.com/cweill/gotests/...
go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct
go get -u -v github.com/fatih/gomodifytags
go get -u -v github.com/godoctor/godoctor
go get -u -v github.com/haya14busa/gopkgs/cmd/gopkgs
go get -u -v github.com/josharian/impl
go get -u -v github.com/mdempsky/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v github.com/zmb3/gogetdoc
#+end_src
**** doom emacs
- [[https://qiita.com/Ladicle/items/feb5f9dce9adf89652cf][Ladicle Golang Doom Emacs customizations]]
**** GTAGS
~gtags~ will create ~CTAGS~ files to [[https://www.gnu.org/software/global/][global]]. For Go you can use [[https://github.com/juntaki/gogtags][gogtags]] to
generate the files. It also works well with [[https://melpa.org/#/helm-gtags][helm-gtags]].

*** Code Examples

- [[http://l3x.github.io/golang-code-examples/][l3x.github.io/golang-code-examples/]]
*** Code Style
- [[https://yolken.net/blog/cleaner-go-code-golines][Cleaner go code with golines]]
- [[https://golang.org/doc/effective_go][Effective Go (golang.org)]]
- [[https://rytisbiel.com/2021/03/06/darker-corners-of-go/][Darker Corners of Go]]
  - covers most of the 101 topics beginners should know about Golang
**** Clean Code Examples
- [[https://github.com/ahmetb/kubectx][github.com/ahmetb/kubectx]]
- [[https://github.com/gojek/heimdall][github.com/gojek/heimdall]]
- [[https://github.com/ethereum/go-ethereum][github.com/ethereum/go-ethereum]]
- [[https://github.com/drone/drone][github.com/drone/drone]]
- [[https://github.com/google/exposure-notifications-server][github.com/google/exposure-notifications-server]]
*** Design

- [[https://dave.cheney.net/2016/08/20/solid-go-design][SOLID Go Design]]
- [[https://the-zen-of-go.netlify.com/][The Zen of Go]]
  - [[https://dave.cheney.net/2020/02/23/the-zen-of-go][more detailed version]]
- [[https://github.com/RefactoringGuru/design-patterns-go][Design Patterns by refactoring.guru]]
- [[https://medium.com/@matiasvarela/hexagonal-architecture-in-go-cfd4e436faa3][Hexagonal Architecture in Go]]
*** Fun
- [[https://github.com/SuperPaintman/the-evolution-of-a-go-programmer][Evolution of a Go programmer]]
*** Internals
- [[https://www.alexedwards.net/blog/a-recap-of-request-handling][A recap of request handling in Go]]
- [[https://lanre.wtf/blog/2017/07/24/roundtripper-go/][Diving deep into net/http : A look at http.RoundTripper]]
- [[https://echorand.me/posts/golang-dissecting-listen-and-serve/][Dissecting golang's HandlerFunc, Handle and DefaultServeMux]]
- [[https://jaxenter.de/golumne-go-requests-multiplexen-81161][Requests richtig verarbeiten: Keine Sorge beim Multiplexen in Go]]
- [[https://rafallorenz.com/go/handle-signals-to-graceful-shutdown-http-server/][How to handle signals with Go to graceful shutdown HTTP server]]
- [[https://eli.thegreenplace.net/2021/life-of-an-http-request-in-a-go-server/][Life of an HTTP request in a Go server - Eli Bendersky's website]]
**** Context
- [[https://blog.golang.org/context-and-structs][Contexts and structs]]
    #+begin_quote
    Context provides a means of transmitting deadlines, caller cancellations, and other request-scoped values across API boundaries and between processes. It is often used when a library interacts --- directly or transitively --- with remote servers, such as databases, APIs

    When designing an API with context, remember the advice: pass =context.Context= in as an argument; don't store it in structs.
    #+end_quote

- [[https://steveazz.xyz/blog/import-context/][How to use context in different uses cases]]

*** Interviews

- [[https://evrone.com/rob-pike-interview    ][2020-05 | Rob Pike interview for Evrone: “Go has become the language of cloud infrastructure”]]

*** Messaging
**** Bots
***** Slack

- [[https://github.com/slack-go/slack/tree/master/examples][slack-go/slack examples]]
- [[https://blog.gopheracademy.com/advent-2017/go-slackbot/][Create a Slack bot using Golang]]
- [[https://medium.com/mercari-engineering/writing-an-interactive-message-bot-for-slack-in-golang-6337d04f36b9][Write an interactive message bot for Slack in Golang]]
  - full code: [[https://github.com/tcnksm/go-slack-interactive][go-slack-interactive]]
- [[https://api.slack.com/docs/token-types#bot][bot tokens]]
- [[http://davestevens.github.io/slack-message-builder/][slack-message-builder]]
- [[https://api.slack.com/messaging/composing/layouts#attachments][message attachments]]
- [[https://api.slack.com/tools/block-kit-builder][block kit builder]]
- *Frameworks*
  - [[https://github.com/shomali11/slacker][github.com/shomali11/slacker]]
- [[https://github.com/go-chat-bot/bot][github.com/go-chat-bot/bot]]
  - IRC, SLACK, Telegram and RocketChat bot written in Go
- [[https://github.com/alexandre-normand/slackscot][github.com/alexandre-normand/slackscot]]
  - Slack bot core/framework written in Go with support for reactions to message updates/deletes
*** Malware
- [[https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/amp/][Blackrota, a heavily obfuscated backdoor written in Go]]
*** Modules

- [[https://bencane.com/stories/2020/07/06/how-i-structure-go-packages/][How I Structure Go Packages]]
  Some great advice about logging and package structure
- [[https://peter.bourgon.org/go-best-practices-2016/#repository-structure][Go best practices, 6 years in]]

*** Testing

- [[https://github.com/quii/learn-go-with-tests][Learn go with test-driven development (TDD)]]
- [[https://deliveroo.engineering/2019/05/17/testing-go-services-using-interfaces.html][Testing Go services using interfaces (deliveroo)]]
- [[https://medium.com/@kelvin_sp/building-and-testing-a-rest-api-in-golang-using-gorilla-mux-and-mysql-1f0518818ff6][Building and Testing a REST API in GoLang using Gorilla Mux and MySQL]]
- [[https://blog.codecentric.de/en/2017/08/gomock-tutorial/][Testing with GoMock: A Tutorial - codecentric AG Blog]]
- [[https://blog.codecentric.de/2019/07/gomock-vs-testify/][GoMock vs. Testify: Mocking frameworks for Go]]
  - learn how to use ~mockery~ and ~testify~
  - 3 classes fo failures:
    - Unexpected calls
    - Missing calls (expected, but not occurred)
    - Expected calls with unexpected parameter values
- [[https://blog.alexellis.io/golang-writing-unit-tests/][Golang basics - writing unit tests]]
- [[https://lanre.wtf/blog/2017/04/08/testing-http-handlers-go/][Testing HTTP Handlers in Go]]
- [[https://mkaz.blog/code/testing-clients-to-an-http-api-in-go/][Testing Clients to an HTTP API in Go]]
- [[https://blog.gopheracademy.com/advent-2016/how-to-write-good-tests-for-solid-code/][Writing good unit tests for SOLID go]]
  - structs will depend on interfaces instead of structs (easy for dependency injection)
  - What should be tested:
    - when testing, you can think of it as sending and receiving messages
    - *incoming messages* refer to calls to methods
    - *outgoing messages* refers to calls from the tested object on its dependencies
  - most people go first to integration tests
- [[https://getstream.io/blog/how-we-test-go-at-stream/][Testing Go at Stream]]
- [[https://medium.com/swlh/using-go-interfaces-for-testable-code-d2e11b02dea][Using Go Interfaces for Testable Code - The Startup - Medium]]
  - using interfaces for stubbing
- [[https://dev.to/ilyakaznacheev/how-i-write-my-unit-tests-in-go-quickly-4bd5][2020-05 | How I write my unit tests in Go quickly]]
  - on dependency injection
  - duck typing interfaces
  - BDD (Behaviour Driven Development)

**** Fuzzing

- [[https://medium.com/a-journey-with-go/go-fuzz-testing-in-go-deb36abc971f][Go: Fuzz Testing in Go - A Journey With Go]]

**** TDD

- More on [[*TDD]]
Great resources:
- [[HTTPS://github.com/quii/learn-go-with-tests][github.com/quii/learn-go-with-tests]]
- [[https://leanpub.com/golang-tdd/read][leanpub.com/golang-tdd/read]]
  - really good explanations

*** Tools

- [[https://www.alexedwards.net/blog/an-overview-of-go-tooling][An overview of Go's tooling]]
- [[https://arenzana.org/2019/01/emacs-go-mode/][Emacs and Go mode]]
- [[https://github.com/ChimeraCoder/gojson][gojson]]: Automatically generate Go (golang) struct definitions from example JSON
- [[https://godoc.org/golang.org/x/tools][golang.org/x/tools]]
  - [[http://golang.org/s/using-guru][go-guru]]
- [[https://github.com/davecgh/go-spew][go-spew]]: Implements a deep pretty printer for Go data structures to aid in debugging
- [[https://zoralab.gitlab.io/godocgen/en-us/][godocgen]]
  #+begin_quote
  Godocgen is an app built using Go programming language to generate Go module
  package's documentations. It parses the packages documentation data and
  facilitates custom rendering, enabling Gopher to use other hosting solution
  like Hugo to host the documents.
  #+end_quote
- [[https://github.com/aaronjanse/3mux][3mux]]: Terminal multiplexer inspired by i3
- [[https://github.com/jumbleview/tspur][tspur]]: Terminal Screen with Protected User Records (TSPUR)
- [[https://mholt.github.io/json-to-go/][json-to-go]]
  - This tool instantly converts JSON into a Go type definition

*** Templates

- [[https://blog.gopheracademy.com/advent-2017/using-go-templates/][Using go templates]]

*** Logging

- [[https://www.0value.com/about-go-logging][About Go logging for reusable packages]]

  Use some global variadic function:

  #+begin_src go
    package mypkg

    // LogFunc is a function that logs the provided message with optional
    // fmt.Sprintf-style arguments. By default, logs to the default log.Logger.
    var LogFunc func(string, ...interface{}) = log.Printf
  #+end_src

- [[https://www.reddit.com/r/golang/comments/em8uiu/how_to_start_with_logging_in_go_projects_part_2/][Some words about logging]]
  - Some tips:
    - Never log in a package that isn't main
    - Don't log things if the program is operating normally
    - only log in package main

- [[https://dave.cheney.net/2015/11/05/lets-talk-about-logging][Let's talk about logging]]
- [[https://github.com/go-kit/kit/tree/master/log][go-kit/log]]

*** OO

- [[https://icyapril.com/go/programming/2017/12/17/object-orientation-in-go.html][Object Oriented Go - The Basics]]
*** Packaging
- [[https://www.zombiezen.com/blog/2020/09/how-i-packaged-go-program-windows-linux/][Zombie Zen - How I packaged a Go program for Windows and Linux]]
- [[https://www.gobeyond.dev/packages-as-layers/amp/][Packages as layers, not groups]]
  - How to think of your modules as layers and not as groups
  - by Ben Johnson (wo wrote the [[https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1][standard package layout]])
- [[https://bencane.com/2020/12/29/how-to-structure-a-golang-cli-project/][How to Structure a Go Command-Line Project]]
- [[https://peter.bourgon.org/go-best-practices-2016/#repository-structure][Go best practices, six years in]]
*** Serialization

- [[http://choly.ca/post/go-json-marshalling/][Custom JSON Marshalling in Go]]
  - Nice elegant solution using aliases, e.g.

  #+begin_src go
    func (u *MyUser) MarshalJSON() ([]byte, error) {
      type Alias MyUser
      return json.Marshal(&struct {
        LastSeen int64 `json:"lastSeen"`
        ,*Alias
      }{
        LastSeen: u.LastSeen.Unix(),
        Alias:    (*Alias)(u),
      })
    }
  #+end_src
- [[http://gregtrowbridge.com/golang-json-serialization-with-interfaces/][Golang JSON Serialization With Interfaces]]
  - Working with plants and animals
  - adds extra field ~type~ to know which struct to use
- [[https://stackoverflow.com/questions/42721732/is-there-a-way-to-have-json-unmarshal-select-struct-type-based-on-type-prope][Is there a way to have json.Unmarshal() select struct type based on “type” property?]]
  - how to do deserialization when field is a list of interfaces
  - implement ~UnmarshalJSON~ on slice of interfaces
  - [[https://play.golang.org/p/zQyL0JeB3b][Example with []vehicle]]

*** Security

- [[https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/][Security assessment techniques for go projects]]
  - static analysis, fuzzing, dynamic testing etc.
- [[https://goteleport.com/blog/csrf-attacks/][CSRF Attacks]]
  - Implementing CSRF, auth handler
**** Pentest
- [[https://github.com/sysdream/hershell][github.com/sysdream/hershell]]
- [[https://github.com/sysdream/chashell][github.com/sysdream/chashell]]
  - using DNS as reverse shell
- [[https://github.com/sysdream/ligolo][github.com/sysdream/ligolo]]
**** Botnets
- [[https://github.com/gnxbr/Unbreakable-Botnet-C2][github.com/gnxbr/Unbreakable-Botnet-C2]]
  - using Blockchains for communication channel
**** Scanners
- [[https://github.com/v-byte-cpu/sx][github.com/v-byte-cpu/sx]]
*** Surveys
- [[https://blog.jetbrains.com/go/2021/02/03/the-state-of-go/][State of Go in 2021]]
*** UI
- [[https://www.vugu.org/][Vugu]]
  - A modern UI library for Go+WebAssembly
** Hugo                                                                         :hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: hugo
:END:

Some curated list of bookmarks related to ~hugo~.

*** Themes

- [[https://themes.gohugo.io/hermit/][hermit]]
  - https://www.petersheim.net
    - first time this theme was seen
  - https://nicke.io/
    - dark version
  - https://nayak.io/
    - light version
  - https://jimmysong.io/
    - clean white
  - https://leaanthony.com/
    - clean white, navigation bar at the top
  - https://linuxwind.com/
    - another clean white version
  - https://milad.dev
    - clean blog structure
    - also check his [[https://milad.dev/books][books list]]
  - https://daryl.wakatara.com
    - really nice posts about [[https://daryl.wakatara.com/tags/gtd/][productivity]], [[https://daryl.wakatara.com/tags/emacs/][emacs]] and interesting [[https://daryl.wakatara.com/tags/books/][book]] recommendations
- [[https://prose.yihui.org/][Hugo Prose]]
- [[https://tract-docs.dev/en/][Tract]]
  - Good for documentation
- [[https://themes.gohugo.io/hugo-theme-pure/][Hugo Theme Pure]]
  - Also has Tocbot
- [[https://bella.cc/blog/][bella.bc]]
  - Customization of ER theme with Zettels.
- [[https://github.com/mpaluchowski/hugo-well-traveled][hugo-well-travelled]]
  - for travelling

*** Searching

- [[https://www.josephearl.co.uk/post/static-sites-search-hugo/][Easily add search using lunr.js]]
- [[https://sentamal.in/articles/static-site-search-with-lunrjs/][Static site search using lunr.js]]
- [[https://www.forsure.dev/-/2019/09/03/add-search-functionality-to-your-hugo-static-site/][Add search functionality to your hugo static site]]
- [[https://halfelf.org/2017/hugos-making-json/][Generate index JSON]]
- [[https://halfelf.org/2017/hugos-lunr-search/][Generate the Lunr.JS search]]
- Themes that implement search
  - [[https://github.com/vjeantet/hugo-theme-docdock][hugo-theme-dockdock]]

*** [[https://discourse.gohugo.io/t/easy-full-hugo-simple-online-shop-with-just-netlify-stripe/27960/6][Easy "Full Hugo" simple online shop with just Netlify + Stripe]]
:PROPERTIES:
:TIMESTAMP: <2021-03-02 Tue>
:END:
k
** Music :music:
:PROPERTIES:
:EXPORT_FILE_NAME: music
:END:
*** Bluetooth Codecs

- [[https://www.amazon.com/b?ie=UTF8&node=14070322011][Amazon Music Unlimited HD FAQ]]
- [[https://www.androidauthority.com/bluetooth-codecs-997074/][Bluetooth codecs 101: Everything you need to know - Android Authority]]
  https://www.androidauthority.com/bluetooth-codecs-997074/
- [[https://www.soundguys.com/understanding-bluetooth-codecs-15352/][Understanding Bluetooth codecs - SoundGuys]]
- [[https://www.audioholics.com/audio-technologies/bluetooth-audio-guide][2018 Bluetooth Audio Codec Comparison Guide Part2: aptX HD, AAC & LDAC | Audioholics]]

*** Binaurale Beats

- [[https://www.12trance.de/binaural-beats-erklaert/][https://www.12trance.de/binaural-beats-erklaert/]]
  - Wie funktionieren binaurale Beats?
    #+begin_quote
    Was genau passiert in deinem Gehirn, wenn du einer binauralen Musik zuhörst?
    Zunächst einmal erreichen dich über die Kopfhörer links und rechts jeweils
    verschiedene Sinustöne, so genannte Trägerfrequenzen. Diese hören sich je nach
    Frequenz unterschiedlich hoch an. Beim Anhören werden diese beiden Töne direkt
    in deinem Gehirn vermischt und ein Binauraler Ton erzeugt. Dieser besitzt genau
    die Schwingungsfrequenz aus der Differenz der beiden Trägerfrequenzen.
    #+end_quote
  - Welche Frequenzen gibt es?
    #+begin_quote
    Prinzipiell wird zwischen 5 verschiedenen Bewusstseinszuständen unterschieden:

    - Im *Gamma-Zustand* (ab 30 Hz) fühlen wir uns gestresst. Unser Körper arbeitet
      hier auf Hochleistung. Der Niedriggammabereich bis 38 Hz wird auch oft als
      Beta-3-Zustand bezeichnet.
    - Im *Beta-Zustand* (13 - 30 bzw. 38 Hz) befinden wir uns quasi im Normalmodus.
      Hier erledigen wir normale Tagesabläufe.
    - Im *Alpha-Zustand* (8 - 13 Hz) treten wir in die Entspannung ein. Wenn wir
      z.B. lesen, Musik hören oder uns etwas Interessantes ansehen.
    - Der *Theta-Zustand* (4 - 8 Hz) ist ein besonderer Zustand zwischen Wachsein
      und Schlaf; Halbschlaf, wenn man so will. Diesen Zustand nehmen wir meist
      nicht mehr bewusst wahr, oft nur in tiefer Trance. Dieser Zustand ist
      besonders interessant um luzide Träume auszulösen.
    - Als letztes gibt es dann noch den *Delta-Zustand* (0 - 4 Hz). Diesen erreichen
      wir in unseren Tiefschlafphasen. Wer in eine Astralreise einsteigen möchte,
      muss diesen Zustand mit wachem Bewusstsein erreichen.
    #+end_quote
- Playlists
  - [[https://www.youtube.com/channel/UCCgPgZzLtaDVN9eB4LOMZlA][neobeats]]
  - [[https://www.youtube.com/channel/UCPF-YXh4LdqA7sykdjpPrHw][Magnetic Minds]]
- Forschung
  - [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6900908/][Possible Effect of Binaural Beat Combined With Autonomous Sensory Meridian Response for Inducing Sleep]]

*** Djembe                                                                      :djembe:
**** Youtube
***** Watch "Hayashi-Mamady duo. Grandmasters Mamady Keita (djembeföla) and Eitetsu Hayashi (taiko soloist)" on YouTube

https://youtu.be/NCnoDfOuIKY

***** Watch "Harouna Dembele djembekan in Poland 2017" on YouTube

https://youtu.be/IaIQkJUeYtE

***** Watch "Thomas Guei djembekan Prague 2019 03 23" on YouTube

https://youtu.be/XbJQyPzyd8E

***** Watch "Harouna Dembele - Djembe Kan" on YouTube

https://youtu.be/jJiiAz29s5E

***** Watch "Petit Adama Diarra "Djembe Kan" Vilnius ( Lituania 2019)" on YouTube

https://youtu.be/t2-swp8QxmQ
** Security
:PROPERTIES:
:EXPORT_FILE_NAME: security
:END:
*** Pentest
**** Checklists
- [[https://six2dez.gitbook.io/pentest-book/others/web-checklist][six2dez.gitbook.io/pentest-book/others/web-checklist]]
- [[https://gbhackers.com/web-application-penetration-testing-checklist-a-detailed-cheat-sheet/][Web Application Penetration Testing Checklist – A Detailed Cheat Sheet]]
  - Information Gathering
  - Authentication
  - Authorization
  - Configuration Management
  - Session Management
  - DoS
  -
*** Application Security
**** [[https://application.security/][Application Security Training For Developers | Kontra]]
:PROPERTIES:
:TIMESTAMP: <2021-03-02 Tue>
:END:
All kind of appsec related simulations/trainings.
*** Offensive
- [[https://secret.club/][secret club | We Break Software]]
** Software Engineering
:PROPERTIES:
:EXPORT_FILE_NAME: software-engineering
:END:
*** Architecture
- [[https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html][Why you need an ARCHITECTURE.md to your project]]
*** General
- [[https://a16z.com/2011/08/20/why-software-is-eating-the-world/][Why Software is eating the world? (2011)]]
*** CI/CD
- [[https://www.infoq.com/articles/Continuous-Delivery-Maturity-Model/][The Continuous Delivery Maturity Model]]

** ORG Mode :org:
:PROPERTIES:
:EXPORT_FILE_NAME: org-mode
:END:
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Literate Programming]]
- [[https://blog.lazkani.io/posts/text-editors/bookmark-with-org-capture/][Bookmark with Org-capture | The DevOps Blog]]
** Rust :rust:
:PROPERTIES:
:EXPORT_FILE_NAME: rust
:END:
- [[https://academy.kerkour.com/black-hat-rust?][Black Hat Rust]]
* Notes                                                                         :note:
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :noauthor true :nocomment true :nodate true :nopaging true :noread true
:EXPORT_HUGO_SECTION: notes
:EXPORT_HUGO_WEIGHT: auto
:END:
** BeyondCorp
:PROPERTIES:
:EXPORT_FILE_NAME: beyondcorp
:END:

#+begin_quote
BeyondCorp is Google's implementation of the zero trust security model that
builds upon eight years of building zero trust networks at Google, combined with
ideas and best practices from the community. By shifting access controls from
the network perimeter to individual users and devices, BeyondCorp allows
employees, contractors, and other users to work more securely from virtually any
location without the need for a traditional VPN. -- [[https://cloud.google.com/beyondcorp][BeyondCorp at Google]]
#+end_quote

*** [[https://research.google/pubs/pub43231/][Beyond Corp: A new approach to enterprise security]]

- The perimeter security model is often compared to a medieval castle
- access depends solely on device and user credentials, regard-less of a user’s network location—be it an enterprise location, a home network, or a hotel or coffee shop

*** [[https://research.google/pubs/pub44860/][Beyond Corp: Design to Deployment at Google]]

- access policies are based on information about a device, its state, and its associated user
- use of X.509 certificates as a persistent device identifier

*** [[https://research.google/pubs/pub45728/][Beyond Corp: The Access proxy]]

- Google implemented a centralized policy enforcement front-end Access Proxy (AP) to handle coarse-grained company policies.
- implemented for HTTP and SSH
  - wrap SSH traffic in HTTP over TLS (by using ProxyCommand)
  - they developed a local proxy, similar to Corkscrew
- The main components of Google’s front-end infrastructure are a f leet of HTTP/HTTPS reverse proxies called Google Front Ends
- authentication:
  - support OAUTH, OpenID connect and custom protocols
- authorization:
  - ACL engine queryable via RPCs

** AWS                                                                          :aws:
:PROPERTIES:
:EXPORT_FILE_NAME: aws
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

*** AMI
*** aws cli

Some currated list of useful ~aws~  CLI commands.

- API Gateway

  | desc             | command                               |
  |------------------+---------------------------------------|
  | get-domain-names | ~$ aws apigatewayv2 get-domain-names~ |

- SSM

  | desc          | command                                                                                           |
  |---------------+---------------------------------------------------------------------------------------------------|
  | get parameter | ~$ aws --profile default ssm get-parameter --with-decryption --name "<ssm path>"~                 |
  | put parameter | ~$ aws ssm put-parameter --name <path> --value <value> --type SecureString --key-id <KMS key ID>~ |

- Cloudformation

  | desc               | command                                                              |
  |--------------------+----------------------------------------------------------------------|
  | tail for CF events | ~$tail-stack-events -f --die -n 5 --region <region> -s <stack name>~ |

- SQS

  | desc                    | command                                                                                          |
  |-------------------------+--------------------------------------------------------------------------------------------------|
  | receive one message     | ~$ aws sqs receive-message --queue-url <queue url> --region <region>~                            |
  | get attributes of queue | ~$ aws sqs get-queue-attributes --queue-url <queue url> --region <region> --attribute-names All~ |
  | purge queue             | ~$ aws sqs purge-queue --queue-url <queue url>~                                                  |

- DynamodDB

  | desc                 | command                                                                                                                                                                                  |
  |----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | scan with expression | ~$ aws dynamodb scan --table-name <table name> --filter-expression "repo_name = :repo" --expression-attribute-values '{":repo":{"S":"my_repo"}}' --projection-expression <table fields>~ |
  | scan                 | ~aws dynamodb scan --table-name tiddlers --endpoint http://127.0.0.1:8000~                                                                                                               |

  - Delete multiple items

    Use ~scan~ to retrieve list of items and save to same file:
    #+begin_src shell
        $ aws dynamodb scan --table-name <table name> --filter-expression "repo_name = :repo" --expression-attribute-values '{":repo":{"S":"my_repo"}}' --projection-expression "unique_id" > results.log
    #+end_src

    Then use ~delete-item~ to delete single entries:

    #+begin_src shell
        $ cat results.log | jq -r ".Items[] | tojson" | tr '\n' '\0' | xargs -0 -I keyItem aws dynamodb delete-item --table-name <table name> --key=keyItem
    #+end_src

*** Tools

| Tool                                          | Description                         |
|-----------------------------------------------+-------------------------------------|
| [[https://github.com/wallix/awless][awless]]  | A mighty CLI for AWS                |
| [[https://github.com/donnemartin/saws][saws]] | A supercharged CLI based on aws cli |

*** SQS

- [[https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html][Amazon SQS visibility timeout]]

** Static Code Analysis
*** Articles
**** Lessons from building static analysis tools at Google                      :sca:google:
:PROPERTIES:
:EXPORT_FILE_NAME: lessons-from-building-static-analysis-tools-at-google
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

https://cacm.acm.org/magazines/2018/4/226371-lessons-from-building-static-analysis-tools-at-google/fulltext

***** Problems to solve

- tool not integrated into developer's workflow
- users don't trust the results
- reported bug is theoretically possible, but the problem doesn't really manifest in practice
- findings are to expensive to fix
- users don't understand the warnings
- On "effective false positives":
  - developers didn't take action after seeing the issue
  - developers don't understand the fault and therefore don't take action

#+begin_quote
Developers, not tool authors, will determine and act on a tool's perceived false-positive rate.
#+end_quote

- Lessons learned from integrating FindBugs into CI/CD
  - integrate vulns dashboard with devs workflow
  - Manually triaging issues and filing bug reports is not sustainable at a large scale.
  - post results (from scanners) as comments on the code-review thread
  - this integration was discontinued due
    - the presence of effective false positives caused developers to lose confidence in the tool

***** [[https://research.google/pubs/pub43322/][*Tricorder*]]

- Architecture
  [[file:images/tricorder_arch.png]]

  #+begin_quote
  Tricorder. Tricorder is designed to be easily extensible and support many different kinds of program-analysis tools, including static and dynamic analyses
  #+end_quote

  #+begin_quote
  ricorder analyzers report results for more than 30 languages, support simple
  syntactic analyses like style checkers, leverage compiler information for Java,
  JavaScript, and C++, and are straightforward to integrate with production data
  (such as about jobs that are currently running).
  #+end_quote

- Scaling
  - As of January 2018, Tricorder had analyzed approximately 50,000 code review changes per day
  - Reviewers clicked "Please Fix" more than 5,000 times per day
  - Tricorder analyzers received "Not useful" clicks 250 times per day.

***** Lessons learned

- Google's initial implementation of FindBugs relied on engineers choosing to
  visit a central dashboard to see the issues found in their projects, though
  few of them actually made such a visit
- finding bugs in already check-in code is too late
- analysis tools must be integrated into the workflow and enabled by default for everyone
- For a static analysis project to succeed, developers must feel they benefit from and enjoy using it.
  - there is a team behind Tricorder
  - team performs surveys to understand developer sentiment
  - developers need to build trust in the tools
  - If a tool wastes developer time with false positives and low-priority issues, developers will lose faith and ignore results.

**** Scaling Static Analyses at Facebook                                        :sca:facebook:
:PROPERTIES:
:EXPORT_FILE_NAME: scaling-static-analyses-at-facebook
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

https://cacm.acm.org/magazines/2019/8/238344-scaling-static-analyses-at-facebook/fulltext
#+begin_quote
To industry professionals we say: advanced static analyses, like those found in
the research literature, can be deployed at scale and deliver value for general
code. And to academics we say: from an industrial point of view the subject
appears to have many unexplored avenues, and this provides research
opportunities to inform future tools.
#+end_quote

***** Deployments
****** "diff time" deployment

- analyzers participate as bots in code review
- make automatic comments when engineer submits code modification
- this kind of deployment lead to *70% fix rate*
- traditional (offline or batch) deployment saw a *0% fix rate*
- security related issues are pushed to the security engineer on-call for
  commenting on code modification

****** Software Development at Facebook

- there is a main codebase (master)
- this gets altered by modifications submitted by devs
- CI/CD:
  - anaylyses run on the code modification and participate by *commenting their
    findings directly in the code review tool*

***** Reporting

#+begin_quote
The actioned reports and missed bugs are related to the classic concepts of true
positives and false negatives from the academic static analysis literature. A
true positive is a report of a potential bug that can happen in a run of the
program in question (whether or not it will happen in practice); a false
positive is one that cannot happen.
#+end_quote

****** False positives

#+begin_quote
the false positive rate is challenging to measure for a large, rapidly changing
codebase: it would be extremely time consuming for humans to judge all reports
as false or true as the code is changing.
#+end_quote

- don't focus on true positives and false negatives (even if valuable concepts)
- pay more attention to *action rate* and the observed *missed bugs*

****** Actioned reports
****** Observable missed bugs

- has been observed in some way
- but was not reported by an analysis

***** Tools

Tools used by Fb to conduct static analysis

****** [[https://github.com/facebook/infer][Infer]]

#+begin_quote
Infer has its roots in academic research on program analysis with separation
logic,5 research, which led to a startup company (Monoidics Ltd.) that was
acquired by Facebook in 2013. Infer was open sourced in 2015 (www.fbinfer.com)
and is used at Amazon, Spotify, Mozilla, and other companies.
#+end_quote
- targets mobile apps
- applied to Java, Objective C and C++
- processes about 10s of millions of Android and Objective C code
- uses analysis logic based on the theory of *Separation Logic*
- finds errors related to more than 30 types of issues:
  - memory safety
  - concurrency (deadlocks and starvation)
  - security (information flow)
  - custom errors (suggested by Fb devs)

****** Zocolan

- mainly does "taint" analysis
  - builds a dependency graph that related methods to their potential callers
  - uses this graph to schedule parallel analyses of individual methods
- deployed for more than 2 years (in 2019), first to security engineers then to
  software engineers
- report can trigger the security expert to create tasks
- can process over 100-million lines of [[https://hacklang.org][Hack]] code in less than 30 minutes
- implements new modular parallel taint analysis algorithm

***** Lessons learned
****** First run

First deployment was rather batch than continous:
- run once (per night)
- generate list of issues
- assign issues to devs

Results:
- devs didn't act on the issues assigned
- Fb reduced the false positive rate (down to 20%) but devs still didn't take
  actions on issues

****** Switch to Diff time

- the response of engineers was at about 70%
- positive rate didn't change
- but the impact was bigger when the static analysis was deployed at diff time

****** Human factors

The success of the diff time came as no surprise to Fb's devs:
- mental effort of context switch+
  - if dev is working on one problem, and the assigned issue is about another
    one, they must swap out the mental context of the first problem and swap in
    the second
  - by participating as a bot in the code review process, the context switch was
    kind of solved
- relevance
  - sometimes it's hard to find the right person to assign issues to
  - by commenting on a diff that introduces an issue we have a pretty good
    chance to find the relevant person

***** Additional resources

- [[https://www.youtube.com/watch?v=Vj0QVRaw8A4]["Move fast and secure things (with static analysis)" by Ibrahim Mohamed El-Sayed]]
- [[https://engineering.fb.com/security/zoncolan/][How Facebook uses static analysis to detect and prevent static issues]]

** Software Engineering
:PROPERTIES:
:EXPORT_FILE_NAME: software-engineering
:END:

- [[https://blog.pragmaticengineer.com/software-architecture-is-overrated/amp/][Software Architecture is Overrated, Clear and Simple Design is Underrated]]

** emacs                                                                        :emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs
:END:

*** Topics
**** How to remove empty lines in region
- Select what you want to change, or C-x h to select the whole buffer.
- Then: ~M-x flush-lines RET~ followed by ~^$ RET~ or ~^[[ : space : ]]*$ RET~
- ~^[[ : space : ]]*$~ contain the meta-characters:
  - ^ for beginning of string,
  - $ for end of string,
**** Tag multiple headers in a region
- Select region
- run ~M-x org-change-tag-in-region~

**** Remove read-only lock in a buffer
~C-x C-q~
*** org-mode
- [[https://blog.lazkani.io/posts/text-editors/bookmark-with-org-capture/][Bookmark with Org-capture | The DevOps Blog]]
  How to capture links with own functions (for lisp beginners)

** docker
:PROPERTIES:
:EXPORT_FILE_NAME: docker
:END:

*** Commands

- Run a container
  #+begin_src sh
    $ docker run -ti <image repository> --name <name of new container>
  #+end_src
- Attach to running container
  #+begin_src sh
    $ docker attach --name <name of container>
  #+end_src
- Run command inside a running container
  #+begin_src sh
    $ docker container exec -ti <name of container> <command>
  #+end_src

** TDD
:PROPERTIES:
:EXPORT_FILE_NAME: tdd
:DATE:     2015-01-01
:END:

*** Definition

https://leanpub.com/golang-tdd/read

#+begin_quote
Test-driven development is a strict discipline for creating modular,
well-designed and testable code without doing any upfront design. It achieves
this by making you work in extremely short cycles: create an automated test,
write the minimum amount of code to satisfy that test, and refactor your code to improve the quality.
#+end_quote

*** Cycles

There are *3 cycles*
- Red
  - The cycle starts by writing a test that captures the new requirement; this test is expected to fail. Many tools display test failures in red, hence the name.
- Green
  - The cycle continues by writing the minimal amount of code necessary to satify the tests. This name too is derived from the fact that many tools display test success in green. When you start practicing test-driven development, it is a common pitfall to write more than the minimal amount of code. Be aware of this, and keep asking yourself if you are doing more than the minimum required.
- Refactor
  - The latest step in the cycle is what makes test-driven development a viable process: it forces you to step back, to look at your code, and to improve its structure without adding any functionality. The refactor step is not an optional step6 – without this step your code will quickly degenerate into a well-tested but incomprehensible mess.

*** Test doubles

Traditionally, there are five types of *test doubles*:

- Dummies :: Types without any behavior at all, provided only because the signature of the unit under test requires them.
- Stubs :: Types implementing the minimum amount of behavior to satisfy a test.
- Mocks :: Partial implementations for which you can define expectations on how their methods will be called.
- Spies :: Partial implementations on which you can assert that specific methods have been called.
- Fakes :: Full, lightweight implementations such as in-memory databases.
** Hands-On Software architecture with Golang
:PROPERTIES:
:EXPORT_FILE_NAME: hands-on-software-architecture-golang
:END:
*** Summary

#+begin_quote
Hands-On Software Architecture with Golang starts with a brief introduction to
architectural elements, Go, and a case study to demonstrate architectural
principles. You'll then move on to look at code-level aspects such as
modularity, class design, and constructs specific to Golang and implementation
of design patterns. As you make your way through the chapters, you'll explore
the core objectives of architecture such as effectively managing complexity,
scalability, and reliability of software systems. You'll also work through
creating distributed systems and their communication before moving on to
modeling and scaling of data. In the concluding chapters, you'll learn to deploy
architectures and plan the migration of applications from other languages. -- [[https://www.packtpub.com/eu/application-development/hands-software-architecture-golang][source]]
#+end_quote

*** Engineering principles
**** *High-level design*

#+begin_quote
This is the decomposition of the system into high-level components. This serves
as the blueprint that the product and code need to follow at every stage of the
product development life cycle. For example, once we have a layered architecture
(see the following section), then we can easily identify for any new requirement
to which layer each new component should
#+end_quote

**** *Quality attributes*

#+begin_quote
We want high quality code, and this means no code checking would be allowed
without unit tests and 90% code coverage
#+end_quote

**** *Product velocity*

#+begin_quote
The product has a bounded value in time and, to ensure that there is high
developer productivity, the team should build Continuous Integration /
Continuous Deployment (CICD) pipelines from the start.
#+end_quote

**** A/B testing

#+begin_quote
Every feature should have a flag, so that it can be shown only to an x
percentage of users
#+end_quote

*** Software Architecture

- package code into components
  - divide system into partitions
  - each parition has specific concern and role
  - each component has well defined interfaces and responsabilities
- work with the components as abstract entities
- manage complexity
- [[https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html][The Clean Architecture]]

  #+CAPTION: The Clean Architecture / (c) Robert C. Martin
  [[file:../static/notes/software-engineering-golang/clean-architecture.jpg]]
  - by Rober Cecil Martin (more commonly known as Uncle Bob)
  - the dependency rule is important

    #+begin_quote
    This rule says that source code dependencies can only point inward.
    Nothing in an inner circle (variables, classes, data, and private functions)
    can know anything at all about something in an outer circle
    #+end_quote

*** Role
**** The role of the architect

- define a blueprint for what needs to be built
- ensure the team has enough details to get the job done
- guides the rest of the team toward this design during execution
- talks to stakeholders
- it's possible to do the architect's job w/o coding:
  - one must understand the low-level details, constraints and complexity

*** Microservices

*Definition:*

#+begin_quote
The basic concept of a microservice is simple—it's a simple, standalone application that does one thing only and does that one thing well. The objective is to retain the simplicity, isolation, and productivity of the early app. A microservice cannot live alone; no microservice is an island—it is part of a larger system, running and working alongside other microservices to accomplish what would normally be handled by one large standalone application.
#+end_quote

Each microservice is:
- autonomous
- independent
- self-contained
- and individually deployable
- and scalable.

**** Advantages

- use the componentization strategy
  - divide and rule more effectively
  - with clear boundaries between components.
- create the right tool for each job in a microservice
- testability
- improved developer productivity and feature velocity.

*** Go

#+begin_quote
The Go programming language was conceived in late 2007 by Robert Griesemer, Rob Pike, and Ken Thompson, as an open source programming language that aims to simplify programming and make it fun again. It's sponsored by Google, but is a true open source project—it commits from Google first, to the open source projects, and then the public repository is imported internally.
#+end_quote

#+begin_quote
The language was designed by and for people who write, read, debug, and maintain large software systems. It's a statically-typed, compiled language with built-in concurrency and garbage collection as first-class citizens.
#+end_quote

**** TODO Introduction

Ideas how to structure a Golang intro session
- Hello World
- Data types and structures
- Functions and methods
- Flow control
- Packaging
- Concurrency
- Garbage collection

**** Object orientation

For polymorphic behavior, Go uses *interfaces and duck typing*:

#+begin_quote
"If it looks like a duck and quacks like a duck, it's a duck."
#+end_quote

Duck typing:
- class implements an interface if it has all methods and
- implement these methods

**** Class

#+begin_quote
A class is a blueprint, or a template for objects that share the same behavior
and properties. Being a template, it can be used as a specification to create
objects.
#+end_quote

**** Contracts

#+begin_quote
The individual constructs (or functions) by which you can invoke behavior on the
object are called methods.
#+end_quote

**** Encapsulation

#+begin_quote
=Encapsulation= is the key guiding principle for class design. It implies exposing
a contract for the behavior of objects and hiding volatile implementation
details. The private attributes and methods are hidden inside a capsule
according to a need-to-know basis
#+end_quote
#+begin_quote
Encapsulation is defined as the wrapping up of data under a single unit. It is
the mechanism that binds together code and the data it manipulates. In a
different way, encapsulation is a protective shield that prevents the data from
being accessed by the code outside this shield. -- [[https://www.geeksforgeeks.org/encapsulation-in-golang/][Encapsulation in Golang]]
#+end_quote

**** Polymorphism

#+begin_quote
This ability of an interface method to behave differently based on the actual
object is called polymorphism and is key to many design patterns
#+end_quote

**** Composition

#+begin_quote
An alternative to inheritance is to delegate behavior, also called composition.
Instead of an is a, this is a has a relationship. It refers to combining simple
types to make more complex ones.
#+end_quote

***** Over Inheritance

- in Java for example inheritance defines a ~is-a~ relationship between classes
- in Golang we build class relationships using a ~has-a~ relationship
Main concept in Golang:

#+begin_quote
Classes implement an interface—which is the contract the base class offers.
Functionality reuse happens through having references to objects, rather than
deriving from classes. This is why many people, including people who code in Go,
have the Composition Over Inheritance principle
#+end_quote

[[https://golangbot.com/inheritance/][Good example]]
#+begin_src go
  package main

  import (
      "fmt"
  )

  type author struct {
      firstName string
      lastName  string
      bio       string
  }

  func (a author) fullName() string {
      return fmt.Sprintf("%s %s", a.firstName, a.lastName)
  }

  type post struct {
      title   string
      content string
      author
  }

  func (p post) details() {
      fmt.Println("Title: ", p.title)
      fmt.Println("Content: ", p.content)
      fmt.Println("Author: ", p.fullName())
      fmt.Println("Bio: ", p.bio)
  }

  func main() {
      author1 := author{
          "Naveen",
          "Ramanathan",
          "Golang Enthusiast",
      }
      post1 := post{
          "Inheritance in Go",
          "Go supports composition instead of inheritance",
          author1,
      }
      post1.details()
  }
#+end_src
#+begin_quote
Whenever one struct field is embedded in another, Go gives us the option to
access the embedded fields as if they were part of the outer struct. This means
that p.author.fullName() in line no. 11 of the above code can be replaced with
p.fullName()
#+end_quote

*** Design patterns

#+begin_quote

Design patterns are solutions to recurring problems in software engineering. Rather than a comprehensive solution, a design pattern is a description of a problem and a template of how to solve it. This template then becomes usable in many different contexts.
#+end_quote
Idea:
- study the problem and the solutions
- goal is to identify patterns among your requirements and architecture
- use pre-conceived solutions to the problem
- if design is composed of well-known patterns, it's easy to:
  - share idea
  - communicate and discuss with other stakeholders

**** Design principles

- 2 aspects:
  - What is the responsibility of each class?
  - What other classes depend on the current one and what is the contract
    between these classed?

**** SOLID

- for Go check [[https://dave.cheney.net/2016/08/20/solid-go-design][SOLID Go Design]]
- Uncle Bob defines five principles of good class design in his book [[https://www.goodreads.com/book/show/84985.Agile_Software_Development_Principles_Patterns_and_Practices][Agile Software Development, Principles, Patterns and Pratices]]
- *Single Responsibility Principle (S)*
  - Key point :: Structure functions, types, methods into packages that have
    "natural" cohesion; functions serve a single purpose

  #+begin_quote
  "One class should have one, and only one, responsibility"
  #+end_quote

  - don't chose names like ~common~, ~utils~ etc.
  - use UNIX philosophy
    - combine sharp tools to solve larges tasks
    -
- *Open/Closed Principle (O)*
  - Key point :: compose simple types into more complex ones using embedding

    #+begin_quote
    Software entities should be open for extension, but closed for modification.
    #+end_quote
    #+begin_quote
    "You should be able to extend a class's behavior without modifying it."
    #+end_quote
    #+begin_quote
    This essentially means that classes should be open for extension but closed
    for modification, so it should be possible to extend or override class
    behavior without having to modify code. Behavior change should be pluggable
    into the class, either through overriding some methods or injecting some
    configuration. One excellent example of a framework exhibiting this principle
    is the Spring Framework
    #+end_quote


- *Liskov Substitution Principle (L)*
  - Key point :: express dependencies between packages in terms of interfaces
    and not concrete types
  - This is a slight variation of the Open/Closed Principle, and Uncle Bob states it as follows:
    "Derived types must be substitutable for their base types."

  - This principle is called Liskov because it was first written by [[https://en.wikipedia.org/wiki/Barbara_Liskov][Barbara Liskov]]:
    #+begin_quote
    "What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2—then S is a subtype of T.
    #+end_quote
  - basically a specification for an abstract base class with various concrete subtypes

    Example is the *io.Reader* interface:

    #+begin_src go
    type Reader interface {
    // Read reads up to len(buf) bytes into buf.
    Read(buf []byte) (n int, err error)
    }
    #+end_src

    #+begin_quote
    Because io.Reader‘s deal with anything that can be expressed as a stream of
    bytes, we can construct readers over just about anything; a constant string, a
    byte array, standard in, a network stream, a gzip’d tar file, the standard out
    of a command being executed remotely via ssh. And all of these implementations
    are substitutable for one another because they fulfil the same simple contract.
    -- [[https://dave.cheney.net/2016/08/20/solid-go-design][source]]
    #+end_quote

- *Interface Segregation Principle (I)*
  - Key point :: define functions/methods that depend only on the behaviour that
    they need

    #+begin_quote
    Clients should not be forced to depend on methods they do not use. -- Robert
    C. Martin
    #+end_quote
    #+begin_quote
    Many client-specific interfaces are better than one general-purpose interface
    #+end_quote

    Example:

    #+begin_src go
      // Save writes the contents of doc to the supplied Writer.
      func Save(w io.Writer, doc *Document) error
    #+end_src
    #+begin_quote
    By applying the interface segregation principle to our Save function, the
    results has simultaneously been a function which is the most specific in terms
    of its requirements–it only needs a thing that is writable–and the most general
    in its function, we can now use Save to save our data to anything which
    implements io.Writer. -- [[https://dave.cheney.net/2016/08/20/solid-go-design][source]]
    #+end_quote

    which leads to:

    #+begin_quote
    A great rule of thumb for Go is accept interfaces, return structs.
    –Jack Lindamood
    #+end_quote
- *Dependency Inversion Principle (D)*
  #+begin_quote
  High-level modules should not depend on low-level modules. Both should depend on abstractions.
  Abstractions should not depend on details. Details should depend on abstractions.
  –Robert C. Martin
  #+end_quote

  #+begin_quote
  Depend on abstractions, not on concretions.
  #+end_quote
  - For Golang that means
    - Every package should have interfaces that describe functionality without the implementation
    - When a package needs a dependency, it should take that dependency as a
      parameter (specify interfaces as parameters)

**** Creational

#+begin_quote
Creational design patterns are design patterns that deal with object creation
mechanisms in a safe and efficient manner and decouple clients from
implementation specifics. With these patterns, the code using an object need not
know details about how the object is created, or even the specific type of
object, as long as the object adheres to the interface expected.
#+end_quote
- Factory method
- Builder
- Abstract factory
- Singleton

**** Behavioral

#+begin_quote
Behavioral design patterns are design patterns that identify communication
patterns among objects and provide solution templates for specific situations.
In doing so, these patterns increase the extensibility of the interactions
#+end_quote
- Command
- Chain of Responsibility
- Mediator
- Memento
- Observer
- Visitor
- Strategy

**** Structural

#+begin_quote
In Software Engineering, Structural Design Patterns are Design Patterns that
ease the design by identifying a simple way to realize relationships between
entities -- [[https://sourcemaking.com/design_patterns/structural_patterns][Source]]
#+end_quote
- Adapter
- Bridge
- Composite
- Decorator
- Facade
- Flyweight
- Proxy

*** Scaling applications
**** Distributed algorithms
***** Google's MapReduce

- Map (C) -> [(kx, vy)]: This extracts information from a record and generates key-value tuples.
- Reduce (k, [vx,vy...[]) -> (k,vagg): The reducer takes the key-value tuples generated in the map phase, grouped by the key, and generates an aggregate result.
- [[https://blog.gopheracademy.com/advent-2015/glow-map-reduce-for-golang/][glow-map-reduce-for-golang]]

**** Scalability bottlenecks

- [[http://www.kegel.com/c10k.html][The C10k problem]]
  At the start of the 21st century, engineers ran into a scalability bottleneck: web servers were not able to handle more than 10,000 concurrent connections.
- The thundering herd problem
- [[http://highscalability.com/blog/2012/5/16/big-list-of-20-common-bottlenecks.html][common bottlenecks]]

*** Scaling systems
**** The Art of Scalability (Book)

#+CAPTION: 3D scalability model / (c) The scalability Book
[[file:../static/notes/software-engineering-golang/art-of-scalability.png]]
- X-axis scaling
  #+CAPTION: (c) Jyotiswarup Raiturkar
  [[file:../static/notes/software-engineering-golang/scalability-x.png]]
  #+begin_quote
  Scaling along the x-axis means running multiple copies (instances) of the
  application behind a load balancer. If there are n instances, then each
  handles 1/n of the load. This is the simplest way of increasing scalability,
  by throwing hardware at the problem
  #+end_quote
- Y-axis scaling
  #+CAPTION: (c) Jyotiswarup Raiturkar
  [[file:../static/notes/software-engineering-golang/scalability-y.png]]
  #+begin_quote
  The objective of scaling along the y-axis is splitting the application into
  multiple, different services. Each service is responsible for one or more
  closely related functions. This relates to our microservices discussion, and
  is essentially a perfect deployment strategy for a service-oriented
  architecture. The benefit of this type of architecture is that hardware can be
  efficiently used for only those areas of the application that need it The
  solution to these issues is to implement an API gateway: an endpoint that
  clients calls which in turn handles the orchestration and composition of
  communication between services to get the clients what they need
  #+end_quote
- Z-axis scaling
  #+CAPTION: (c) Jyotiswarup Raiturkar
  [[file:../static/notes/software-engineering-golang/scalability-z.png]]
  #+begin_quote
  z-axis scaling mode, each instance runs the same code, but with a different
  set of data. That is, each server is responsible for only a subset of the
  data. The orchestrator described previously now becomes more intelligent and
  has to route requests to the specific instance having the data in order for
  the request to complete. One commonly used routing parameter is the primary
  key of the attribute for which the request is being made: for example, to get
  bookings for a specific user, we can route the requests based on the user ID.
  We can route not just on specific IDs, but also on segments; for example, the
  travel website can provide premium customers with a better SLA than the rest
  by outing the requests to a specific pool of high-capacity servers Z-axis
  scaling mandates that the data (and hence the database) be split across the
  various set of instances. This is called sharding. Sharding is typically done
  on the primary key of the data and divides the whole data set into multiple
  partitions
  #+end_quote

*** Distributed systems
**** Architecture

- Components: Modular units with well-defined interfaces (such as services and
  databases
- Interconnects: The communication links between the components (sometimes with
  the additional responsibility of mediation/coordination between components)

**** Distributed system quirks

In 1994, Peter Deutsch, who worked at Sun Microsystems, wrote about common wrong assumptions that developers/architects make, which cause things to go wrong in distributed systems. In 1997, James Gosling added to this list to create what is commonly known as the eight fallacies of distributed computing. They are described here.
- The network is reliable
- The topology doesn't change
  - What does this mean in terms of code? It means not assuming location (endpoints) for various services. We need to build in service discovery, so that clients of services can figure out how to reach a particular service. There are two ways clients can discover service endpoints:
- The bandwidth is infinite
- The latency is zero
  - Caching values every programmer should know about: https://gist.github.com/jboner/2841832
- The network is secure
- There is one administrator
- The transport cost is zero
- The network is homogeneous

*** Distributed architectures
**** Object-based

- RPCs
- RMIs

**** Layered

#+begin_quote
This architectural style can be thought of as an inverted pyramid of reuse,
where each layer aggregates the responsibilities and abstractions of the layer
directly beneath it. When the layers are on different machines, they are
called tiers. The most common example of strict layering is where components
in one layer can interact only with components in the same layer or with
components from the layer directly below it.
#+end_quote

**** P2P

- Hybrid
- Structured
  - DHT (Distributed Hash Tables)

**** Distributed computations

- MapReduce

**** EDA (Event-driven Architecture)

#+CAPTION: (c) Jyotiswarup Raiturkar
[[file:../static/notes/software-engineering-golang/eda-messaging.png]]

- promotes an architectural paradigm where behavior is composed by reacting to
  events.
- Actor model
- Stream processing

*** Messaging

A messaging system can be judged on its performance in four aspects—scalability, availability, latency, and throughput.

**** Scalability

#+begin_quote
This is how the system is able to handle increases in load without noticeable
degradation of the other two factors, latency or availability. Here, load can
mean things such as the number of topics, consumers, producers, messages/sec, or
average message size
#+end_quote

**** Availability

#+begin_quote
In a distributed system, a variety of problems can occur at a unit level
(servers, disks, network, and so on). The system's availability is a measure of
how resilient the system is to these failures so that it is available to end
users
#+end_quote

**** Latency

#+begin_quote
This is how much time it takes for a message to get to a consumer from a
producer
#+end_quote

**** Throughput

#+begin_quote
This is how many messages can be processed per second by the messaging system
#+end_quote

**** Broker-based messaging

#+begin_quote
A broker is a component that acts as the intermediary in a messaging system.
Here, the clients connect to the broker and not to each other directly. Whenever
clients want to send and receive messages, they need to specify a
mailbox/topic/queue on the broker. Producers connect to the broker and send
messages to a specific queue. Consumers connect to the broker and specify queue
name from which they want to read messages.
#+end_quote

***** Responsabilities

- Maintaining the mapping of queues, producers, and consumers reliably: This includes storing the messages in a durable format
- Handling message production: This includes storing messages written by the producers.
- Handling message consumption: This means ensuring that consumers reliably get messages and providing constructs to avoid duplicate messages
- Routing and transformation: Here, the message broker may transform or maintain multiple copies for each message to enable various topology models, which will be described in the following sections.

***** Models

- Queue
- Pub/Sub

**** Integration patterns
***** Using Golang channels

- The request-reply pattern
- The correletation identified pattern
- The pipes and filters pattern
- The content-based router pattern
- The fan-in pattern
- The fan-out pattern
- The background worker pattern

*** API
**** REST
***** Constraints

- client-server model
- stateless
- uniform interface
  #+begin_quote
  The REST paradigm promotes a uniform interface for all interactions between the
  client and the server. As described earlier, the key abstraction is the
  resource. A resource is identified by a unique hierarchical name, and can have
  multiple representations.
  #+end_quote

***** Richardson Maturity Level

- Level 0
  #+begin_quote
  At level 0, the API uses the implementing protocol (normally HTTP, but it
  doesn't have to be) like a transport protocol. There is no effort to utilize the
  protocol to indicate state; it is just used to pass requests and responses back
  and forth. The system typically has one entry point (URI) and one method
  (normally POST in the case of HTTP).
  #+end_quote
- Level 1 - resources
  #+begin_quote
  Here, the API distinguishes between multiple resources using different URLs.
  However, there is still typically only one method (POST) of interaction. This is
  better than the previous level because now there is a hierarchical definition of
  resources. Instead of going through /hotels, now the API assigns IDs to each
  hotel and uses that to see which hotel the request is for, so the API will have
  URLs of the /hotels/<id> form.
  #+end_quote
- Level 2 - HTTP Verbs
  #+begin_quote
  This level indicates that the API uses protocol properties (namely, HTTP verbs)
  to define the nature of the API. Thus GET is used for a read, POST is used to
  create a new resource, PUT to update a resource, and DELETE to of course delete
  the resource. The API also uses standard responses code such as 200 (OK) and 202
  (ACCEPTED) to describe the result of the request.

  Generally, most REST API implementations are at this level.
  #+end_quote

- Level 3 - Hypermedia controls
  #+begin_quote
  Level 3, the highest level, uses Hypertext As The Engine Of Application State
  (HATEOAS) to allow clients to deal with discovering the resources and the
  identifiers.
  #+end_quote

  Example:

  #+begin_src
  GET /hotels/xyz
  #+end_src

  Response:

  #+begin_src
  {
      "city": "Delhi",
      "display_name": "Hotel Xyz",
      "star_rating": 4,
      "links": [
          {
              "href": "xyz/book",
              "rel": "book",
              "type": "POST"
          },
         {
              "href": "xyz/rooms",
              "rel": "rooms",
              "type": "GET"
  ...
  #+end_src

*** Anti-fragile systems
**** Engineering reliability
***** Messaging

- The asynchonous computation pattern
- The orchestrator pattern
- The compensating-transaction pattern
- The pipes and filter pattern
- The sidecar pattern

* Gists :gist:
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :noauthor true :nocomment true :nodate true :nopaging true :noread true
:EXPORT_HUGO_SECTION: gists
:EXPORT_HUGO_WEIGHT: auto
:END:
** A JavaScript keylogger using a websocket Golang server                       :golang:
:PROPERTIES:
:EXPORT_FILE_NAME: javascript-keylogger-websocket-golang
:HUGO_SECTION: gist
:END:

{{< gist dorneanu 02c9c5bb83e881e7ad2c1e93c7c2fd24 >}}
** Simple plugin architecture in Python                                         :python:
:PROPERTIES:
:EXPORT_FILE_NAME: simple-plugin-architecture-in-python
:END:

{{< gist dorneanu cce1cd6711969d581873a88e0257e312 >}}
** List all repos inside an organization using python and github3               :python:github:
:PROPERTIES:
:EXPORT_FILE_NAME: list-all-repos-inside-an-organization-using-python-and-github3
:END:

{{< gist dorneanu d25e5eb327429095285fd6552486d064 >}}

* COMMENT Local Variables                                                       :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
